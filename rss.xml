<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>LoveVin</title>
        <link>https://twinklelixn.top/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.63.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>twinkelixn@qq.com (LoveVin)</managingEditor>
        
        
            <webMaster>twinkelixn@qq.com (LoveVin)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Sat, 01 Feb 2020 21:51:54 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://twinklelixn.top/rss.xml" />
        
        
            <item>
                <title>JS的奇葩之处</title>
                <link>https://twinklelixn.top/posts/javascript-bug/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-bug/</guid>
                <pubDate>Sat, 01 Feb 2020 21:50:47 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-let房里房外">1. let房里房外</h2>
<p>有以下两个代码，看似没区别，但结果天差地别，其中setTimeout时间间隔为0时表示尽快执行该代码，尽快那也得等到语句从头到尾执行完再执行了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">i</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span> <span class="c1">//打印出6个6
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span> <span class="c1">//打印出0,1,2,3,4,5，因为每次循环都复制了一个i，实际一共7个i了
</span></code></pre></td></tr></table>
</div>
</div><p>这样是不是使用setTimeout打印出0,1,2,3,4,5就没意义了，不如直接打印i，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">i</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/js%E5%A5%87%E8%91%A9/">JS奇葩</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS三座大山之this</title>
                <link>https://twinklelixn.top/posts/javascript-mountain-this/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-mountain-this/</guid>
                <pubDate>Sat, 01 Feb 2020 21:48:33 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-this是什么">1. this是什么</h2>
<p>在JS中，每个函数都有一个隐藏的属性叫做this，其属性值默认是对象的地址，用于指向一个对象。通常情况下this常用于用作构造函数的函数中，普通函数一般用不到this属性。普通函数中用不到的this通常指向的是window对象，因为调用它的是window对象。构造函数中的this是用于指定未知的对象，当一个对象obj通过构造函数构造出来时，该对象中的this属性就是指向该对象本身。</p>
<h5 id="注意箭头函数没有this其余函数都有this">注意箭头函数没有this，其余函数都有this</h5>
<h2 id="2-自定义this">2. 自定义this</h2>
<h4 id="21-强制封装成对象">2.1 强制封装成对象</h4>
<p>this指向的对象一般是随函数或者对象的创建而内定的，只有通过一个接口可以修改this指向的对象，即</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">functionName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">自定义this值</span><span class="err">，</span><span class="nx">arguments值</span><span class="p">)</span> 
<span class="nx">functionName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">自定义this值</span><span class="p">)</span>

<span class="c1">//或者
</span><span class="c1"></span><span class="nx">functionName</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">自定义this值</span><span class="err">，</span><span class="p">[</span><span class="nx">arguments值</span><span class="p">]</span><span class="p">)</span> 
<span class="c1">//该方法的arguments值必须用中括号[]包含起来
</span></code></pre></td></tr></table>
</div>
</div><p>而且，this接收的值只能是对象，因此若通过call指定的this值不是对象类型，如是number类型1，那么JS会自动将1封装成对象。</p>
<h4 id="22-不要给我强制封装">2.2 不要给我强制封装</h4>
<p>当然了，也可以通过修改，告诉JS不让其将自定义的this值强制封装成对象，那么就是如下方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="s1">&#39;use strict&#39;</span> <span class="c1">//就是添加这句话
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>那么this值就是1，不会被封装成对象，不过这样做没什么用，只是有这样的实现方法而已。</p>
<h4 id="23-bind函数绑定this">2.3 bind函数绑定this</h4>
<p>函数有一个bindAPI，可用于this指向的对象和arguments值，这样可以让this始终指向一个固定的对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;haha&#39;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">;</span>
<span class="nx">f2</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">//f2() === f1.call({name:&#39;haha&#39;})
</span></code></pre></td></tr></table>
</div>
</div><h2 id="3-为什么要用this">3. 为什么要用this</h2>
<p>由以上可知，this是用来指向一个未知对象的，那么为什么会用到一个未知对象呢？情况其实是，假如我们自定义一个功能为自我介绍的函数，即函数里输出一个对象的name属性，那么这个对象可能还没有被创建出来，不知道这个对象怎么能输出其名字呢？因此就用到了给该函数设置一个形式参数当作该对象放那里，直接写输出形式参数的name属性，当该对象被创建出来时，该对象在调用自我介绍函数的同时将自己作为参数传入函数，这样就能正确自我介绍了。</p>
<p>因此this就是上述函数中对象形参的演变，JS给每个函数统一规定了这样一个隐形参数this，每个对象在调用一个函数时都会将对象本身作为参数传入，在函数中就以this这个隐形形参接受该对象，并对其进行各种操作。也就是说，我们在调用一个函数时，尽管写的是 obj . functionName(); 看似没有传参，但实际上JS已经将调用该函数的对象obj传入函数了，并被函数的this属性接收。</p>
<p>那么为什么说this指向的对象未知呢？因为你不知道谁会调用这个函数，A调用这个函数那this就是指向的A，并且通过this对A进行操作。B调用这个函数那this就是指向B了，并对B进行操作。</p>
<h2 id="4-函数的两种调用方法">4. 函数的两种调用方法</h2>
<p>既然知道了this是什么和用来干什么的，那么对于函数的调用其实有两种形式：</p>
<h4 id="41-看不到this的常用法">4.1 看不到this的常用法</h4>
<p>函数的常用调用方法就是看不到隐藏属相this的产生过程，常用调用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">A</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">//默认是将A作为this调用sayHi函数
</span></code></pre></td></tr></table>
</div>
</div><h4 id="42-看到到this的清晰法">4.2 看到到this的清晰法</h4>
<p>知道this的实际产生原理后可以用自己看得到this值的方法调用函数，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">A</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="nx">A</span><span class="p">)</span><span class="p">;</span> <span class="c1">//这种方法在JS中是错误的，JS不允许这样指定this
</span><span class="c1"></span>
<span class="nx">A</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span><span class="p">;</span> <span class="c1">//这样才是正确指定this的方法，即将A作为this调用sayHi函数
</span><span class="c1"></span>
<span class="c1">//注意使用call的时候要传参数时一定要写上传的this值，否则就将第一个arguments参数当作this了
</span></code></pre></td></tr></table>
</div>
</div><p>所以我们看到，放在对象里的函数的this和该对象没什么关系，this只和调用该函数的对象有关，当然了，放在该对象里的函数只是该对象的属性，只能被该对象调用，可用call指定，不过没必要。</p>
<p>普通函数调用时没有指明对象名字，如add(1,2)。那是默认window对象调用的，所有函数的调用都需要对象调用的，并且该函数必须是作为其调用对象的属性获取到的。</p>
<h5 id="函数只有作为对象的属性才能被调用到">函数只有作为对象的属性才能被调用到</h5>
<h2 id="5-对象创建符new">5. 对象创建符new</h2>
<p>在JS中规定，用new操作符创建出来的对象的this就是指向该新创建的对象，这是new操作符决定的。因此如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="c1">//则this指向的对象就是新创建得到的obj对象
</span></code></pre></td></tr></table>
</div>
</div><h2 id="6-理解this后">6. 理解this后</h2>
<p>在理解了this后，JS中的某些API的具体实现就可以明了了，如数组的forEach遍历接口的实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//forEach的this实现
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">lenght</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//forEach的隐式常用法
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">)</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span>

<span class="c1">//forEach的清晰使用法
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">)</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/js%E4%B8%89%E5%BA%A7%E5%A4%A7%E5%B1%B1/">JS三座大山</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/this/">this</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS三座大山之原型</title>
                <link>https://twinklelixn.top/posts/javascript-mountain-proto/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-mountain-proto/</guid>
                <pubDate>Sat, 01 Feb 2020 21:43:40 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-什么是原型">1. 什么是原型</h2>
<p>原型这个东西真的是JavaScript原创的，和别的语言的抽象和继承不太一样，自己创了个自认为相对简单的原型链出来，不过在新版转折点的ES6标准后，增加了类class的概念，但也是在原型的基础上修改的，因此搞清楚原型的来历再用class类会更容易。</p>
<p>JS中的原型是针对于JS七种数据类型中的对象这一复杂数据类型设计的，原型是为对象服务的，同时原型也是对象。那么原型对象是个什么对象？其实，我们都知道世间万物都有分类，属于同一类的都有一些共同属性，如中国人这一分类，共同属性是黑眼睛、黑头发、黄皮肤等，jS就将中国人这一分类单独构成一个对象，中国人的共同属性组合到一块构成另外一个独立的对象，并将这两个对象链接起来作为中国人这一个整体，那么是如何将两个对象联系在一起的呢，那就是赋予中国人这一分类对象一个prototype属性，该属性值为中国人共同属性对象的地址，通过该prototype属性就可以访问到中国人这一分类对象的共同属性。prototype属性指向的中国人共同属性对象就叫做原型。</p>
<p>针对中国人这一类，只是一个分类，并不是具体到一个中国人，因此要根据中国人这个分类创建一个中国人出来，那就是通过创建对象的方式具体创建一个具体的中国人，如叫张三，(也可先确定原型再创建对象，具体创建对象方法看对象对应的博客)，那么张三是一个中国人，应该具有中国人这一分类的共同属性，那么如何将张三和中国人共同属性联系在一起呢？这时中国人共同属性这个对象就派上用场了，中国人这一分类对象在创建张三这个中国人时就赋予了它一个特殊的隐藏属性__proto__，该属性的值为中国人共同属性对象的地址，这样就把中国人这一分类、中国人共同属性、中国人张三联系起来了。并且张三在使用某些属性介绍自己时，可以先从自己特有的属性上介绍，如张三身高180，性别男等，然后可以介绍其原型的属性，如张三是中国人，具有黄皮肤等，同时张三也可访问到其原型的原型，如中国人这一分类对象的原型是世界人类共有的属性，是个人，两条胳膊两条腿，那么张三也可以使用两条胳膊两条腿介绍自己是个人，这就形成了一个原型链，实例对象可以使用当前所在原型往上数的原型链上的所有原型包括的属性得到信息。</p>
<p>由以上分析可得到一个等式为：</p>
<h5 id="中国人这一分类的prototype属性值--中国人张三的-__proto__值--中国人原型对象地址">中国人这一分类的prototype属性值 === 中国人张三的 __proto__值 === 中国人原型对象地址</h5>
<h2 id="2-关系草图">2. 关系草图</h2>
<p>以下为根据对象和原型间的关系绘制的草图，在看下图之前应该明白几个问题：</p>
<h5 id="1---js将数据划分成了七种数据类型对象是js的数据类型之一对象又根据不同特征进行了分类具体分为普通对象object数组对象array函数对象function用户自定义对象类型等等并且js已经帮忙划分出了数组对象函数对象普通对象日期对象等对象类型并写好了该类对象的共同属性存放在其原型中用户可以直接调用具体函数使用">1)   JS将数据划分成了七种数据类型，对象是JS的数据类型之一，对象又根据不同特征进行了分类，具体分为普通对象(Object)、数组对象(Array)、函数对象(Function)、用户自定义对象类型等等。并且JS已经帮忙划分出了数组对象、函数对象、普通对象、日期对象等对象类型，并写好了该类对象的共同属性存放在其原型中，用户可以直接调用具体函数使用。</h5>
<h5 id="2---在js中只要是对象就有原型并且由该对象的隐藏属性__proto__记录原型对象地址">2)   在JS中只要是对象就有原型，并且由该对象的隐藏属性__proto__记录原型对象地址。</h5>
<h5 id="3---并不是所有对象都有prototype属性只有能创建对象的对象才有prototype属性且该对象是以函数的方式实现函数对象都有prototype属性但并不是所有函数的prototype都有用可以记忆成大写字母开头的对象名如array有prototype属性并且有用小写字母开头的对象如console或自定义函数对象fn等要么没有prototype属性要么有但是没有用相当于没有">3)   并不是所有对象都有prototype属性，只有能创建对象的对象才有prototype属性，且该对象是以函数的方式实现。函数对象都有prototype属性，但并不是所有函数的prototype都有用。可以记忆成大写字母开头的对象名如Array有prototype属性并且有用，小写字母开头的对象如console或自定义函数对象fn等要么没有prototype属性，要么有但是没有用，相当于没有。</h5>
<h5 id="4---用户可通过构造函数创建自定义的对象分类并自定义其原型对象内容">4)   用户可通过构造函数创建自定义的对象分类，并自定义其原型对象内容。</h5>
<p>好了，记住以上问题就可以看如下关系草图了：</p>
<p><img src="/imgs/JS%E5%8E%9F%E5%9E%8B%E4%B8%96%E7%95%8C.jpg" alt="JS原型世界"></p>
<p>以上草图将各类对象间的联系画的很清楚，也可以看出，在JS中，对象之间都是有联系的，以上只需要搞清楚三个区域即可，原型就是在原型区。而且，其实对象根本就没有名字，只有一个地址，上面赋予的对象名字其实是值等于该对象地址的属性名或者变量名。</p>
<p>而且再钻牛角尖一点可以看到，上图的Function函数对象的prototype属性和__proto__属性没有画指向对象，这个比较复杂，而且难以理解，其实，Function对象的prototype属性指向的对象是自己，然后指向对象的__proto__属性指向的是祖宗对象Object.prototype。也就是说，prototype属性从自己饶了一圈指向祖宗对象。然后Function对象的__proto__属性指向的对象是自己，然后指向对象的__proto__属性指向的是祖宗对象Object.prototype，也就是说，__proto__属性也是从自己饶了一圈指向祖宗对象。</p>
<p>奇怪不，prototype自己绕一圈可以理解，你个__proto__绕一圈是为啥？</p>
<p>所以，暂时不深究，只需要理解原型的由来和可自定义即可。</p>
<h2 id="3-原型运用">3. 原型运用</h2>
<p>以上只是介绍了什么是原型，理解了原型是什么，就可以灵活运行原型了，这个设计到JS对象原型的操作和JS构造函数的实现，具体可看构造函数的实现。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/js%E4%B8%89%E5%BA%A7%E5%A4%A7%E5%B1%B1/">JS三座大山</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E5%8E%9F%E5%9E%8B/">原型</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS对象分类之函数</title>
                <link>https://twinklelixn.top/posts/javascript-object-function/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-object-function/</guid>
                <pubDate>Sat, 01 Feb 2020 21:41:08 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-函数的定义">1. 函数的定义</h2>
<p>函数体里面是普通的操作语句，不是对象的键值对。</p>
<h4 id="1-构造函数">1) <strong>构造函数</strong></h4>
<p>(完整详细的写法，但很少用)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;console.log(a); return a + b&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="2-具名函数">2) 具名函数</h4>
<p>(有名字的函数)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">{</span>
   <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="3-匿名函数">3) 匿名函数</h4>
<p>(没有名字的函数，也叫函数表达式)该方法创建的函数sum不会挂到window上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>  

<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> 
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">//语法错误，fn不存在，如果函数定义在等号右边则是以表达式的方式存在，其fn函数的作用域也只在表达式右边，不是全局，出了表达式就不存在。
</span></code></pre></td></tr></table>
</div>
</div><h4 id="4-箭头函数没有this和arguments属性">4) 箭头函数(没有this和arguments属性)</h4>
<p>ES6函数定义新语法,sum不会挂到window上，且箭头函数没有this和arguments属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span> <span class="c1">//函数体只有一个语句时，箭头左边是传入参数，右边是函数体
</span><span class="c1"></span>
<span class="c1">//返回对象
</span><span class="c1"></span><span class="p">(</span><span class="nx">错误</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">=&gt;</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">x</span><span class="p">}</span> <span class="c1">//若返回值为一个对象时，花括号默认是代码块标志，
</span><span class="c1"></span><span class="p">(</span><span class="nx">正确</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">=&gt;</span> <span class="p">(</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">x</span><span class="p">}</span><span class="p">)</span> <span class="c1">//给对象加个括号，标明里面是一个整体，即可正确返回对象
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">//函数体有多个语句
</span></code></pre></td></tr></table>
</div>
</div><h5 id="每个函数都有返回值若不写return默认返回一个undefined并且返回值是在函数执行时返回">每个函数都有返回值，若不写return，默认返回一个undefined，并且返回值是在函数执行时返回</h5>
<h5 id="任何函数的构造函数都是自己">任何函数的构造函数都是自己</h5>
<h2 id="2-函数自身属性">2. 函数自身属性</h2>
<h4 id="1-name">1) name</h4>
<p>name这个属性值就是函数本身的名字</p>
<h4 id="2-length">2) length</h4>
<p>该属性是用来记录函数的形参个数，其属性值是number类型的数字，是形参个数。</p>
<h4 id="3-arguments--箭头函数没有该属性">3) arguments  (箭头函数没有该属性)</h4>
<p>在JS中，函数的定义中形参可以不写，在函数调用时可以直接传参，函数会接收传进来的参数，并且依次放进函数的arguments属性里，arguments属性值看似是个数组，但其实说对象更准确，里面数据是按照数组存储的方式存储的，所以arguments就是数组里提到的伪数组。当调用函数test(1,2)时，输出arguments组成如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arguments</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">{</span>
    <span class="mi">0</span><span class="o">:</span> <span class="mi">1</span>
    <span class="mi">1</span><span class="o">:</span> <span class="mi">2</span>
    <span class="nx">length</span><span class="o">:</span> <span class="mi">2</span>
    <span class="nx">callee</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">test</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">Symbol</span><span class="p">(</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">)</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">values</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>		
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>**总结一句就是：**arguments是包含了函数所有参数的伪数组</p>
<p>伪数组不具有数组的公共属性，如push、pop等，如想把伪数组变成数组，可通过Array.from实现。</p>
<h4 id="4-caller">4) caller</h4>
<h2 id="3-函数公共属性">3. 函数公共属性</h2>
<h2 id="4-闭包">4. 闭包</h2>
<h4 id="41-什么是闭包">4.1 什么是闭包</h4>
<p>如果一个函数用到了外部的变量，那么这个函数加这个变量就叫做闭包</p>
<p>未完待续。。。。</p>
<h2 id="5-调用栈">5. 调用栈</h2>
<h4 id="51-什么是调用栈">5.1 什么是调用栈</h4>
<p>JS引擎在执行一个函数前，需要把函数所在的环境push到一个数组里，这个数组叫做调用栈。等函数执行完了，就会把环境pop弹出来，然后return到之前的环境，继续执行后续代码</p>
<h2 id="6-立即执行函数">6. 立即执行函数</h2>
<h4 id="61-来源">6.1 来源</h4>
<p>在JS中，在函数外用var声明一个变量得到的是一个全局变量，那么如何得到一个局部变量呢？只用通过在函数内声明一个变量才能得到一个局部变量，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>那么a就是局部变量了，可是函数fn却是局部变量啊，为了得到一个局部变量，定义了一个全局函数变量，得不偿失，因此，就想到声明一个匿名函数如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>那么问题来了，匿名函数咋执行啊，没有名字怎么执行函数得到局部变量啊，因此就将函数的声明和执行统一在一起了，形成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>但是这样一来，JS认为该语法是错误的，是不对的，经过实验发现，如果在该函数面前加一个操作符，如+、-等就可成功运行了，也可以用括号将其括起来，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>

<span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="62-结论">6.2 结论</h4>
<p>但经过测试，最保险的方法有如下两种：</p>
<ol>
<li>
<p>在前面加感叹号</p>
</li>
<li>
<p>用括号将其包起来，但是要保证前一个语句后有分号隔开。</p>
</li>
</ol>
<p>这样的函数就是立即执行函数。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/js%E5%87%BD%E6%95%B0/">JS函数</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS对象分类之数组</title>
                <link>https://twinklelixn.top/posts/javascript-object-array/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-object-array/</guid>
                <pubDate>Fri, 31 Jan 2020 19:56:02 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-写在前面">1. 写在前面</h2>
<p>在JS语言中，其实没有真正的数组这个数据类型，JS是用对象模拟数组的形式，在JS中，数组是一种对象下的一个分类，但在其他语言中，数组可能是一个数据类型，要区分开。典型的数组是严格要求数据的数据类型是统一 的，并且可以用下标获取。但JS中的数组中存放的数据的数据类型可以不统一，比如第一个放数字，第二个放字符串，第三个放对象等等都是可以的，JS是通过键值对的方式来模拟数组的。</p>
<h2 id="2-数组的定义">2. 数组的定义</h2>
<h4 id="21-数组的常规定义方法">2.1 数组的常规定义方法：</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="p">;</span> <span class="c1">//只有一个参数时为数组长度，此句为创建一个长度为3的数组
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="p">;</span> <span class="c1">//超过一个参数时为属性值，此为创建一个长度为3且其中值为1,2,3的数组
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="p">;</span> <span class="c1">//上一种形式的简写
</span></code></pre></td></tr></table>
</div>
</div><h4 id="22-数组的非常规定义方法">2.2 数组的非常规定义方法：</h4>
<p><strong>1) 分割符：array = string.split</strong></p>
<p>将字符串进行分割，分割的字符组成一个字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;a,b,c&#39;</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>  <span class="c1">//根据逗号将字符串分割形成数组arr
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">str2</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">str2</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="c1">//分割符为空，根据字符分割成数组arr2
</span></code></pre></td></tr></table>
</div>
</div><p><strong>2) Array的API：array = Array.from(string)</strong></p>
<p>Array.from是最新的JS语法提供的API，作用是将不是数组的东西变成数组形式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span> <span class="c1">//可以将字符串变成数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span> <span class="c1">//不可以将数字变成数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr5</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="c1">//不可以将bool变成数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr6</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="p">{</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span><span class="p">)</span> <span class="c1">//这样形式的对象可以变成数组，必须加length属性
</span></code></pre></td></tr></table>
</div>
</div><p><strong>3) 数组合并：array = array1.concat(array2)</strong></p>
<p>通过两个array的合并得到新的数组，并且不会改变原有数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>4)数组切割： array = array1.slice(切割位置)</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">//从第二个位置开始切割，得到arr1 = [3,4,5,6]，并且不会改变原数组
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//从第0个位置切割，即不切割，原样复制，常用于复制一个数组
</span></code></pre></td></tr></table>
</div>
</div><h4 id="23-伪数组">2.3 伪数组</h4>
<p>伪数组指的是该对象类似于数组对象，但是其原型链中没有数组的原型，该对象也就没有数组对应的属性和API。如下所示创建的数组就是伪数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr8</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上的2.1和2.2的常规和非常规定义的数组都是真数组，伪数组可以通过Array.from变成真数组</p>
<h2 id="3-数组的自身属性">3. 数组的自身属性</h2>
<ol>
<li>
<p>'0'、'1'、'2'、'3'、、、、：index属性，只要是属性名，都是字符串，因此index也是字符串</p>
</li>
<li>
<p>length：长度属性</p>
</li>
</ol>
<h2 id="4-数组的公有属性">4. 数组的公有属性</h2>
<p>数组的公有属性有很多，列举以下常用的属性</p>
<ol>
<li>
<p>push(value)：往数组添加一个值，在栈顶进行。</p>
</li>
<li>
<p>pop()：与push相反，从数组弹出一个值，在栈顶进行。</p>
</li>
<li>
<p>shift()：提高数组栈底部基线，即删除栈底元素。</p>
</li>
<li>
<p>unshift(value)：与shift相反，从栈底插入一个元素。</p>
</li>
<li>
<p>join('x')：在数组字符间用x连接起来并返回连接后形成的字符串，不会影响原有数组。</p>
</li>
<li>
<p>arr1.concat(arr2)：将arr1数组和arr2数组连接起来<strong>返回一个新的数组</strong>，不会影响原有数组。且concat不仅可以接受一个数组，也可接受一个数，就是将该数push进数组的意思</p>
</li>
</ol>
<h2 id="5-数组的操作">5. 数组的操作</h2>
<h4 id="51-删除操作">5.1 删除操作</h4>
<ol>
<li>删除属性(错误)</li>
</ol>
<p>数组也是对象，数组属性的删除可用对象属性删除的方法。如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">// delete arr[&#39;0&#39;] 是一样的，不加引号，也会自定将下标转为字符串
</span><span class="c1"></span><span class="c1">//这样删除，原有数组的length长度不会改变，还会留出一个empty空位置，这样就成了稀疏数组
</span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>改length(错误)</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">lenght</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">//这样就把后面的3和4删除了，length也修改为了2
</span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>用shift删除第一个元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">(</span><span class="p">)</span> <span class="c1">//arr = [2,3,4]，从栈底删除一个元素，且长度会变
</span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>用pop删除最后一个元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span> <span class="c1">//arr = [1,2,3]，从栈顶删除一个元素，且长度会变
</span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>用splice删除中间元素(<strong>splice强大且重要</strong>)</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//意思是从下标为2的位置开始删除1个元素得到 arr = [1,2,4,5,6]
</span><span class="c1"></span><span class="c1">//arr.splice(2,3) //意思是从下标为2的位置删除3个元素得到 arr = [1,2,6]
</span><span class="c1"></span><span class="c1">//arr.splice()
</span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>用splice修改或添加中间元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">222</span><span class="p">)</span> <span class="c1">//意思是从下标为2的位置删除一个元素，并添加一个222,得到
</span><span class="c1"></span><span class="c1">//arr = [1,2,222,4,5,6]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">222</span><span class="p">,</span><span class="mi">333</span><span class="p">)</span><span class="c1">//意思是从下标为2的位置删除一个元素，并添加222和333，得到
</span><span class="c1"></span><span class="c1">//arr = [1,2,222,333,4,5,6]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="52-遍历操作">5.2 遍历操作</h4>
<ol>
<li>属性keys查看(不推荐)</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">//查看arr数组的所有属性名
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">//查看那arr数组的所有属性值
</span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>对象属性in查看(不推荐)</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>for循环查看</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>forEach遍历查看(数组的API)</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span> <span class="c1">//item是数组内容，index是数组下标
</span><span class="c1"></span>
<span class="c1">//forEach接口的实现
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">lenght</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">fn</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>for循环和forEach遍历的区别：</p>
<p>for循环中可以使用break和continue停止，但forEach不行。</p>
<ol start="5">
<li>indexOf查看元素是否在数组中</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">22</span><span class="p">)</span> <span class="c1">//返回-1,说明22不在数组中
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>  <span class="c1">//返回5，说明6在数组中，且下标为5
</span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>find函数是否查找到</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span><span class="p">)</span> <span class="c1">//find里面是函数，只要里面是真就返回符合条件的第一个值
</span><span class="c1"></span>
<span class="c1">//以上只能返回找到符合要求的值，若想返回符合条件值所在的下标，如下：
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="53-增加操作">5.3 增加操作</h4>
<ol>
<li>尾部添加元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="s1">&#39;10&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>头部添加元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1">//得到arr = [7,1,2,3,4,5,6]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="c1">//得到arr = [8,9,10,7,1,2,3,4,5,6]
</span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>中间添加元素</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">3.5</span><span class="p">)</span> <span class="c1">//在下标为3的位置不删除元素，添加一个3.5得到 arr = [1,2,3,3.5,4,5,6]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="54-其他操作">5.4 其他操作</h4>
<ol>
<li>反转操作</li>
</ol>
<p>数组可以进行反转操作，倒置排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span> <span class="c1">//得到 arr=[6,5,4,3,2,1]，修改原来数组
</span><span class="c1"></span>
<span class="c1">//利用数组的reverse可以操作字符串反转问题，如下所示：
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;abcde&#39;</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span>
<span class="nx">str</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="c1">//得到arr = &#39;edcba&#39;
</span><span class="c1"></span>
<span class="c1">//或直接写为
</span><span class="c1"></span><span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>排序</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="p">)</span> <span class="c1">//得到数组从小到大的排序 arr=[1,2,3,4,5,6]
</span><span class="c1"></span>
<span class="c1">//JS默认是小的放前面，但是到底谁小它不知道，它也不知道要比谁，我们可以定义数值大的是小的，则就是从数值大的到小排序了。若想自定义是从大到小还是从小到大，如下：
</span><span class="c1"></span>
<span class="c1">//从小到大排序
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">)</span>
       <span class="k">return</span> <span class="mi">1</span><span class="p">(</span><span class="nx">or正值</span><span class="p">)</span> <span class="c1">//意思是谁值大就是大的
</span><span class="c1"></span>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span> 
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">(</span><span class="nx">or负值</span><span class="p">)</span>  
    <span class="p">}</span>
    <span class="c1">// return a-b //简写形式
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span>
<span class="c1">//从大到小排序：
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">)</span>
       <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">(</span><span class="nx">or正值</span><span class="p">)</span> <span class="c1">//意思是谁值大就是小的
</span><span class="c1"></span>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span>  
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">(</span><span class="nx">or负值</span><span class="p">)</span>  
    <span class="p">}</span>
    <span class="c1">// return b-a //简写形式
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="6-数组的变换">6. 数组的变换</h2>
<p>以下变换都是不会改变原来数组，是返回执行该变换操作后形成的新数组</p>
<h4 id="61-mapn-n">6.1 map(n-&gt;n)</h4>
<p>map是表示一一映射关系，参数为函数，一项项操作后返回，如想把数组中的每一项变成平方，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">item</span><span class="o">*</span><span class="nx">item</span>
<span class="p">}</span><span class="p">)</span> <span class="c1">//这是详写
</span><span class="c1"></span>
<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">*</span><span class="nx">item</span><span class="p">)</span> <span class="c1">//这是简写
</span></code></pre></td></tr></table>
</div>
</div><h4 id="62-filtern-少">6.2 filter(n-&gt;少)</h4>
<p>filter是对array进行一个过滤的操作，参数也为函数，一项项判断后返回真和假，真就要这个元素，返回假就舍弃这个函数。如想获得数组中的偶数，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="kc">true</span><span class="o">:</span> <span class="kc">false</span>
<span class="p">}</span><span class="p">)</span> <span class="c1">//这是详写
</span><span class="c1"></span>
<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="kc">true</span><span class="o">:</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//这是简写
</span><span class="c1"></span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//简写中的简写
</span></code></pre></td></tr></table>
</div>
</div><h4 id="63-reducen-1强大且重要">6.3 reduce(n-&gt;1)(强大且重要)</h4>
<p>reduce是这一次会用到上一次的值，形参第一个是函数，第二个是变化的值的初始值，如下为求和实例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">item</span>
<span class="p">}</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//这是详写 sum初始值为0
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span><span class="nx">item</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="k">return</span> <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">item</span><span class="p">}</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//这是简写
</span></code></pre></td></tr></table>
</div>
</div><p>将map实现的数组元素全部平方用reduce方法实现为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">recuce</span><span class="p">(</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">itme</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span> <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="o">*</span><span class="nx">item</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span>

<span class="c1">//以上之所以要用concat连接的方法是因为想要返回一个数组，结果值result是个数组
</span></code></pre></td></tr></table>
</div>
</div><p>将filter实现的过滤偶数的操作用reduce方法实现为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">item</span> <span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span>
    <span class="p">}</span>  
    <span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span> <span class="c1">//详写版
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)</span><span class="p">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">?</span> <span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="nx">item</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span> <span class="c1">//这是简写
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/array/">Array</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS对象之普通对象</title>
                <link>https://twinklelixn.top/posts/javascript-object-common/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-object-common/</guid>
                <pubDate>Fri, 31 Jan 2020 19:54:57 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-对象的定义">1. 对象的定义</h2>
<h4 id="属性名和属性值">属性名和属性值</h4>
<p>对象是用来描述一个物体及其相关属性的集合体，里面是以键值对表示的无序的数据集合，键值对是指用键值名:键值的方式存储数据，在JS中又称之为属性名：属性值。且JS中的属性名是普通字符串而不是标识符，可以是任意字符，但如果属性名省略引号，则必须是标识符了。而属性值根据传入的数据类型定义类型，如数字、字符串、对象等等类型。(标识符与字符串的区别看XXX)</p>
<p>对象的定义方式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;haha&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">}</span><span class="p">)</span> <span class="c1">//对象的正确创建方法
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;haha&#39;</span><span class="p">}</span> <span class="c1">//对象的简写创建方法
</span></code></pre></td></tr></table>
</div>
</div><p><strong>Object.keys(obj)可以得到obj这个对象的全部键值名</strong></p>
<p><strong>键值对在对象中成为属性名: 属性值，属性名一定为字符串，若想以变量的值作为属性名可以用[变量]取到该变量对应的值，也就是说，不加[]是将属性名自动变成字符串，加了[]就取变量中的值转为字符串</strong></p>
<p><strong>各属性间用逗号','分隔开</strong></p>
<h4 id="属性值可以为函数">属性值可以为函数</h4>
<p>在JS中，属性的值可以为函数，此时称该属性为方法。具体书写方式如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//在对象创建时添加方法
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">myMethod</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...do something
</span><span class="c1"></span>  <span class="p">}</span> <span class="c1">//这是实际完整写法
</span><span class="c1"></span>  
  <span class="c1">// 或者 这样写也可以
</span><span class="c1"></span>  
  <span class="nx">myOtherMethod</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...do something
</span><span class="c1"></span>  <span class="p">}</span> <span class="c1">//该方法是ES5之后的更为简洁的定义方法的语法
</span><span class="c1"></span><span class="p">}</span><span class="p">;</span>


<span class="c1">//在对象创建完后添加方法
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">myObj</span><span class="p">.</span><span class="nx">myNewMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span><span class="p">{</span>
    <span class="c1">// ...do something
</span><span class="c1"></span><span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><h2 id="2-对象的组成">2. 对象的组成</h2>
<p>每个对象在被创建后，其中包含的内容除了用户自定义的属性外，还都有一个共同的属性名&quot;_<em>proto</em>_&quot;，该属性值是一个对象的地址，这个对象是该类对象的共同属性组成的对象，在JS中称之为该类对象的原型。隐藏属性存储着原型对象的地址。只要包含该隐藏属性，就可以直接使用原型对象中的属性和函数。</p>
<h2 id="3-对象属性的操作">3. 对象属性的操作</h2>
<h4 id="31-删除操作">3.1 删除操作</h4>
<h5 id="删除xxx属性值">删除xxx属性值</h5>
<p>obj.xxx = undefined</p>
<p>该操作实际上是将obj对象的xxx属性值删除，其实是赋值为空</p>
<h5 id="删除xxx属性">删除xxx属性</h5>
<ol>
<li>
<p>delete obj.xxx</p>
</li>
<li>
<p>delete obj['xxx']</p>
</li>
</ol>
<p>以上两种操作会将obj这个对象的xxx属性删除，属性删除，该属性值也不存在，且在JS中delete操作就是用来删除对象的属性的</p>
<h5 id="检测删除是否成功">检测删除是否成功</h5>
<ol>
<li>
<p>'xxx' in obj == false //查看xxx是不是obj的属性名，返回值为false表示该属性删除成功</p>
</li>
<li>
<p>'xxx' in obj &amp;&amp; obj.xxx === undefined  //查看xxx是不是obj的属性，并且属性值是否是undefined</p>
</li>
<li>
<p>只用obj.xxx === undefined，无法判断obj对象中是否含有xxx属性，因为当没有该属性时，其值自然是undefined，若有该属性，属性值为undefined，因此两种情况无法区分。</p>
</li>
</ol>
<h4 id="32-读操作">3.2 读操作</h4>
<ol>
<li>
<p>Object.keys(obj)：查看obj对象的所有属性名</p>
</li>
<li>
<p>Object.values(obj)：查看obj对象的所有属性值</p>
</li>
<li>
<p>obj | Object.entries(obj)：查看obj对象的所有属性和属性值</p>
</li>
</ol>
<p>以上三种方法仅仅可以看到对象自己定义的属性，看不到所在原型中的公共属性，若想查看公共属性，如下：</p>
<ol>
<li>
<p>console.dir(obj) //以目录形式输出obj</p>
</li>
<li>
<p>obj._<em>proto</em>_</p>
</li>
</ol>
<p>查看某属性是自己的属性还是公有的属性的方法：</p>
<p>obj.hasOwnProperty('xxx')   //是自己的属性返回true，共有属性返回false</p>
<h5 id="js中的任何对象都有原型原型也是个对象原型对象也有原型只不过被人为定义为null空">JS中的任何对象都有原型，原型也是个对象，原型对象也有原型，只不过被人为定义为null空</h5>
<h5 id="查看单个属性">查看单个属性</h5>
<p>1)中括号法： obj['属性名']      (中括号内为字符串)</p>
<ol start="2">
<li>
<p>点法：obj.属性名 (属性名是字符串)</p>
</li>
<li>
<p>变量中括号法  obj[name]    (中括号内为变量名，且则此变量要已经赋值，最终会变成字符串)</p>
</li>
</ol>
<h5 id="注意objname和objname的区别objname中的name是变量可改变而objname是指的就是字符串为name的属性因此若想动态获取属性则可选择中括号的方式">注意：obj['name']和obj.name的区别，obj[name]中的name是变量，可改变，而obj.name是指的就是字符串为name的属性。因此，若想动态获取属性则可选择中括号的方式。</h5>
<h4 id="33-写操作">3.3 写操作</h4>
<p>写操作的语法和读操作的语法是一样的，读出来直接赋值即可，如obj.name = 'hehe'，obj['name'] = 'hehe'，且对象属性写入时无法修改原型的属性，只能修改自己的属性。</p>
<p><strong>批量赋值</strong>：</p>
<p>JS的批量赋值是ES6新出的一个功能API，具体用法为Object.assign(对象名, {属性: 属性值})，例如：</p>
<p>Object.assign(obj, {name: 'hehe', age: 18})</p>
<p>若想要修改对象的原型，则可通过以下方式：</p>
<ol>
<li>
<p>obj._<em>proto</em>_.toString(原型属性名) = 'xxx'   //这样会轻易改变所有原型的属性，使得原型会乱</p>
</li>
<li>
<p>Object.prototype.toString(原型属性名) = 'xxx'</p>
</li>
</ol>
<h2 id="4-原型链">4. 原型链</h2>
<p>由上述操作可知，每一个对象都有一个隐藏属性__proto__，该属性存储的是一个对象的地址，该对象里是该类型对象的公共属性，因此称__proto__指向的对象为原型。原型对象可通过修改__proto__属性值来修改，指向另外一个自定义的公共属性对象，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">nation</span><span class="o">:</span> <span class="s1">&#39;China&#39;</span><span class="p">,</span> <span class="nx">eyecolor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hehe&#39;</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>

<span class="nx">得到的person的组成为</span><span class="err">：</span>

<span class="nx">person</span><span class="p">{</span>
   <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hehe&#34;</span>
   <span class="nx">gender</span><span class="o">:</span> <span class="s2">&#34;man&#34;</span>
    <span class="nx">__proto__</span><span class="o">:</span>
		<span class="nx">nation</span><span class="o">:</span> <span class="s2">&#34;China&#34;</span>
		<span class="nx">eyecolor</span><span class="o">:</span> <span class="err">&#34;</span><span class="nx">black</span>
        <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样就自定义了直接原型对象，但每一个对象都有原型，自定义的原型对象也有一个原型是Object，因此这样就成了在对象和原型之间添加了自定义的原型对象，形成了原型链。但是，直接修改__proto__属性是不安全的，因此在新版的ES6中新增了一种创建自定义原型的方法，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">nation</span><span class="o">:</span> <span class="s1">&#39;China&#39;</span><span class="p">,</span> <span class="nx">eyecolor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;hehe&#39;</span><span class="p">}</span><span class="p">,</span><span class="nx">gender</span><span class="o">:</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">}</span><span class="p">}</span><span class="p">)</span>
<span class="c1">// var person = Object.create(common)
</span><span class="c1"></span><span class="c1">// person.name = &#39;hehe&#39;
</span><span class="c1"></span><span class="c1">// person.gender = &#39;man&#39;
</span><span class="c1"></span>
<span class="c1">//也会得到和上述一样的person组成，这样在创建对象时就指定原型，而不是先创建对象，再修改原型，这样更安全，是最新版本的创建原型的方法，推荐使用
</span></code></pre></td></tr></table>
</div>
</div><h2 id="5--原型与对象">5 . 原型与对象</h2>
<ol>
<li>以下方法创建对象是修改了直接原型并创建的其原型的属性</li>
</ol>
<p>var person = Object.create({nation: 'China'})</p>
<ol start="2">
<li>以下方法创建对象是创建的自己本身的属性</li>
</ol>
<p>var person = new Object({name: 'hehe'})</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/js%E5%AF%B9%E8%B1%A1/">JS对象</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS对象分类</title>
                <link>https://twinklelixn.top/posts/javascript-object-class/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-object-class/</guid>
                <pubDate>Fri, 31 Jan 2020 19:53:30 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-为什么要分类">1. 为什么要分类？</h2>
<p>JS将数据分为七种数据类型，四基两空一对象，即四个基本数据类型number、string、bool、symbol，两个空数据类型undefined、null，一个对象数据类型。对象数据类型很复杂，但对象数据类型与现实生活的数据信息表示地最为准确，因此用到更广泛。根据实际生活中的数据有分类，JS也将对象数据类型再次细分为不同类型的对象，每类对象抽象出共同属性存放至其原型中。</p>
<p>JS将对象进行分类方便于管理对象，并且JS的创建之初就已经划分出了几类对象，如普通对象Object、数组队形Array、函数对象Function、日期对象Date等等。并且，JS允许用户自定义一类对象，具体实现方法可以用构造函数实现。</p>
<h2 id="2-构造函数">2. 构造函数</h2>
<p>首先介绍一个问题引出构造函数，例如要创建5个不同宽度的正方形对象，并且每个正方形对象都有求周长和求面积的两个方法，可以想到用for循环的方式进行如下创建：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">width</span><span class="o">:</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span>
        <span class="nx">getArea</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="nx">getLength</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上方法会浪费内存，重复创建getArea()函数和getLength()各5次，但其实这些正方形的求面积和求周长的方法是一样的，因此可以抽象出来放到正方形的原型函数中，修改后如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">squarePrototype</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">getArea</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nx">getLength</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上借助原型的概念将正方形的共同属性抽象出来放到原型中，大大节省了内存空间，但以上代码还可以通过传参的形式再优化修改如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">squarePrototype</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">getArea</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nx">getLength</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上代码看起来优化很多，但存在的问题是构造函数和原型函数之前看起来没有什么关系，因此可以将构造函数和其原型函数之间联系起来，采取的方法是将原型函数作为构造函数对象的一个方法，并在原型函数中记录其对应的构造函数是谁，继续修改如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">getArea</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nx">getLength</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">createSquare</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span><span class="p">)</span><span class="p">;</span> <span class="c1">//new字符会帮忙写
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>因此根据以上优化后的代码，JS将其封装起来统一定义，用new操作符调用构造函数创建对象，并且将每个构造函数中的指向原型函数的属性统一定义为prototype属性，将每个prototype中指向其构造函数的属性统一定义为constructor，将构造函数和原型函数相互联系了起来，并且prototyp的constructor指向构造函数自己。因此JS在设计的过程中，给每个函数对象都添加了一个prototype属性，指向其作为构造函数时的原型对象用于存放公共属性，和__proto__属性没有什么关系，<strong>例如Object 的原型是指 Object.<strong>proto</strong>，不是 Object.prototype，因为 Object.prototye 是 Object 构造出来的对象的原型</strong>，__proto__是JS规定每个对象都必须有原型并用该属性存储，函数对象也属于对象，才会有此属性。因此  构造函数的prototype === 实例对象的__proto__，因此写一个构造函数定义一类对象的方式如下所示，这样定义的构造函数命名首字母一般大写。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="c1">//do something
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span> <span class="c1">//构造函数，其中属性为=赋值语句，添加新对象自身属性或方法
</span><span class="c1"></span><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
<span class="p">}</span>  <span class="c1">//添加新对象共用属性
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上就是正确定义构造函数自定义一类对象的方法，通过new操作符省略用原型创造对象并返回对象的操作，直接让用户在构造函数中定义自己的属性，在其prototype属性中定义公共属性，并用new操作符创建对象即可。那么操作符在创建对象时做了什么？如下：</p>
<p>let obj = new X()</p>
<ol>
<li>
<p>自动创建空对象</p>
</li>
<li>
<p>将空对象与原型关联，空对象原型地址__proto__值指定为X.prototype值</p>
</li>
<li>
<p>自动将新创建的空对象作为this关键字运行构造函数</p>
</li>
<li>
<p>自动return this</p>
</li>
</ol>
<p>得到以下公式：</p>
<h5 id="对象-__proto__-其构造函数prototype">对象. __proto__=== 其构造函数.prototype</h5>
<h2 id="3-代码规范">3. 代码规范</h2>
<p>由以上构造函数的形成过程可得出一般约定俗成的命名规法如下：</p>
<ol>
<li>
<p>构造函数的命名为名词，且首字母大写</p>
</li>
<li>
<p>普通函数的命名以动词开头，且首字母小写</p>
</li>
<li>
<p>所有被构造出来的实例对象，首字母小写。</p>
</li>
</ol>
<h2 id="4-class新语法">4. class新语法</h2>
<p>class语法是ES6新增加的语法，将上述构造函数代码修改如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">class</span> <span class="nx">Square</span><span class="p">{</span>
    
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span><span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
    <span class="p">}</span> <span class="c1">//构造函数
</span><span class="c1"></span>    
    <span class="nx">kind</span> <span class="o">=</span> <span class="s1">&#39;shape&#39;</span> <span class="c1">//公有属性为赋值语句，且每个属性之间没有逗号
</span><span class="c1"></span>    <span class="s1">&#39;kind2&#39;</span> <span class="o">=</span> <span class="s1">&#39;Rectangle&#39;</span>
    
    <span class="nx">getLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span> <span class="c1">//公有方法，且每个方法之间没有逗号
</span><span class="c1"></span>
    <span class="nx">getArea</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">}</span> <span class="c1">//公有方法，简写定义方法，常用。
</span><span class="c1"></span>
    <span class="nx">get</span> <span class="nx">area2</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">}</span>  <span class="c1">//get 函数名，该函数设置为只读属性，调用函数area2时不用加()，只需.area2即可调用
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/js%E5%AF%B9%E8%B1%A1/">JS对象</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS数据类型</title>
                <link>https://twinklelixn.top/posts/javascript-data-type/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-data-type/</guid>
                <pubDate>Fri, 31 Jan 2020 19:51:52 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1四基两空一对象">1.四基两空一对象</h2>
<p>在JavaScript脚本语言中，一共有7种数据类型，分别是数字number、字符串string、布尔bool、符号symbol、空undefined、空null、对象object。总结起来就是<strong>四基两空一对象</strong>。</p>
<h2 id="2-数字number">2. 数字number</h2>
<p>JS中的数字是严谨的，如0就有三种，+0、0、-0，值的大小是没有区别，但是当其做分母时，就会得到三个不同的值，+Infinity、Infinity(无穷大)、-Infinity，这些在电脑中存储的方式是不一样的。</p>
<p>JS中还有一种数字是无法表示的数字NAN(not a number)，NAN一般用来表示数学上暂时无法认知的数字，如0/0=NAN。</p>
<h4 id="存储方式">存储方式</h4>
<p>JS中的number数据类型都是以一个64位的浮点数进行存储的，所谓浮点数就是小数点可以移动的数。JS中的数字都统一用二进制的科学记数法表示，如101.01=1.0101*2<sup>2</sup>，则存储是，第一位为正0，中间为2(转为二进制)，后52位为0101，第一位为正JS存储数字时的具体存法为：</p>
<p>0(正)/1(负) (1位)         指数部分(11位)           有效数字(52位)</p>
<p>如上所示，二进制位为64位，第一位用来表示正负，中间11位用来表示指数部分，并且指数部分有正负之分，正负各占一半。后52位用来表示有效数字，由于二进制位的科学计数法的小数点前面的都是1，就为了节省空间不将小数点前的1放入后52位，只放小数点后的。总的来说64位的存储分布为：</p>
<p>符号占1位，指数占11位(表示的范围为-1023~1024)，有效数字占52位(去掉小数点前的1)。</p>
<h4 id="表示范围">表示范围</h4>
<p>表示范围指的是包括正负、指数部分和有效数字部分都用上所能表示的最大数值。</p>
<p>Number.Max_VALUE：可查看number能表示的最大数字转换为十进制为1.7976931348623157e+308</p>
<p>Number.MIN_VALUE：可查看number能表示的最小数字转换为十进制为5e-324</p>
<h4 id="精确度">精确度</h4>
<p>精确度指的是有效数字部分能表示的数字的大小，即转为科学计数法后小数点后的有效位。加上未存入后52位的小数点前的数字1，共2<sup>53</sup>=9007199254740992。所有对于15位有效数字都能表示，16位有效数字的必须以90开头的才能存储，超过精确度的数字存储时会有丢失。这只是说的有效位，如果后面加0是可以存储的。</p>
<h2 id="3-字符串string">3. 字符串string</h2>
<h4 id="字符串写法">字符串写法</h4>
<p>JS中的字符串是用定长的两个字节进行存储的。ES6最新版本的JS的字符串的写法如下：</p>
<ol>
<li>
<p>单引号 'hello'</p>
</li>
<li>
<p>双引号 &quot;hello&quot;</p>
</li>
<li>
<p>反引号  `hello` ，(就是感叹号!左边的`，且最新版本的反引号的好处是可以在字符串中有回车，但单引号和双引号中字符中的回车不起作用)</p>
</li>
</ol>
<p>并且，这些引号不属于字符串的一部分，若想在字符串中出现这些引号，需要用转义字符或其他方式，如下：</p>
<ol>
<li>
<p>用转义字符\     'it\'s ok'</p>
</li>
<li>
<p>引号交替使用，如&quot;it's ok&quot;。</p>
</li>
</ol>
<h4 id="转义字符">转义字符</h4>
<p>转义字符指的是在ES6中有特殊含义的字符若想显示出来必须要告诉系统自己此时不再是特殊作用的字符，而是普通字符，那就是通过转义的方式，在特殊作用字符前加 \ ，用两个字符表示一个字符。如下：</p>
<ol>
<li>
<p>\'表示 '</p>
</li>
<li>
<p>\&quot;表示&quot;</p>
</li>
<li>
<p>\\表示\</p>
</li>
<li>
<p>\n表示换行</p>
</li>
<li>
<p>\r 表示回车</p>
</li>
<li>
<p>\t表示Tab制表符</p>
</li>
<li>
<p>\Unicode编号</p>
</li>
</ol>
<h4 id="字符串属性">字符串属性</h4>
<p>string.length：获得字符串的长度</p>
<p>string[index]：通过下标获取字符串数组中的单一字符</p>
<h4 id="字符串可再编码">字符串可再编码</h4>
<p>字符串可以通过 base64转码 进行字符串转码，用法如下：</p>
<ol>
<li>
<p>window.btoa(&quot;正常字符串&quot;) = &quot;base64编码的字符串&quot;</p>
</li>
<li>
<p>window.atob(&quot;base64编码的字符串&quot;) = &quot;正常字符串&quot;</p>
</li>
</ol>
<h2 id="4-布尔boolean">4. 布尔boolean</h2>
<h4 id="布尔值">布尔值</h4>
<p>boolean只有两个值，true和false(全是小写)，表示真和假。</p>
<p>可以得到bool布尔值的运算有：</p>
<ol>
<li>
<p>否定运算，如!value</p>
</li>
<li>
<p>相等运算，如2==1、1!=2、3===4等</p>
</li>
<li>
<p>比较运算，如2&gt;3等</p>
</li>
</ol>
<h4 id="五个falsy值">五个falsy值</h4>
<p>falsy值指的是不是false但是相当于false的值，JS中一共有5个，分别是<strong>undefined</strong>、<strong>null</strong>、<strong>0</strong>、<strong>NAN</strong>、<strong>''</strong>(注意中间没有空格，空字符串)。一旦运算获得的值是这5个，则布尔值均为false。除此之外的值都被认为是true值。</p>
<h2 id="5-符号symbol">5. 符号Symbol</h2>
<p>不怎么常用，有以下大佬写的博客可供参考学习链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/22652486">学习1</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">学习2</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/symbol">学习3</a></p>
<h2 id="6-两个空undefined和null">6. 两个空undefined和null</h2>
<p>JS在设计的时候是有两种类型的空值，虽然二者在意义上没区别，但在细节上有区别，一般来说，undefined是被动的空值，null是主动赋予的空值。具体情况如下例所示：</p>
<ol>
<li>
<p>变量声明未赋值，默认变量值是undefined，而不是null</p>
</li>
<li>
<p>函数没有return，默认return值是undefined，而不是null</p>
</li>
<li>
<p>一般习惯上将非对象的空值写为undefined，把对象的空值写为null</p>
</li>
</ol>
<h2 id="6-对象object">6. 对象object</h2>
<p>函数、数组、日期都是对象object。对象比较复杂，用一篇博客专门写对象。</p>
<h2 id="7-变量声明">7. 变量声明</h2>
<p>旧版本的JS的变量声明的关键字是var，ES6后的新版本的变量声明的关键字多了两个，分别为let和const，具体区别如下：</p>
<h4 id="var">var</h4>
<p>var是过时的变量声明方式，而且在函数外只要是用var声明过的变量都会被挂在window上，变成window的属性，可用window.变量名获取得到，也就是所谓的全局变量，但在函数内声明的局部变量不会被挂碍window上。</p>
<h4 id="let">let</h4>
<p>let是ES6新版本的JS变量声明的方式。在同一作用域不能有重复变量名的声明。可以在声明时赋值，或先声明后赋值。但有一点是必须变量先声明再使用。新版本的let和var不同之处在于，全局声明的let变量不会挂在window上成为window的属性，用window.变量名获取不到。let可以与for循环配合，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span><span class="c1">//结果会打出5个5,i会被挂到window上
</span><span class="c1"></span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span><span class="c1">//结果会打出0到4，是期望的效果
</span></code></pre></td></tr></table>
</div>
</div><h4 id="const">const</h4>
<p>const是ES6新版本的变量声明的方式，特点是该类型的变量在声明时必须赋值，且是不能再改的常量，因此const用来声明定义一个不可改变的常量</p>
<h4 id="js中的变量是在赋值时才确定的变量的类型">JS中的变量是在赋值时才确定的变量的类型</h4>
<h2 id="8-类型转换">8. 类型转换</h2>
<p>数据类型间可以进行数据转换，如下所示：</p>
<h4 id="numberstring">number==&gt;string</h4>
<ol>
<li>
<p>string = String(number)</p>
</li>
<li>
<p>string = number + ''(空字符串)(加法会将数字转化为字符串)</p>
</li>
</ol>
<h4 id="stringnumber">string==&gt;number</h4>
<ol>
<li>
<p>number = Number(string)</p>
</li>
<li>
<p>number = string - 0 (减法会将字符串转化为数字)</p>
</li>
<li>
<p>number = +string (正号将字符串转化为数字)</p>
</li>
<li>
<p>number = parseInt(string, [进制类型])，在旧版本的JS中，后面的进制类型必须加，如十进制就必须加10，否则以0开头的数字会被认为是八进制数字，但是新版本的进制类型不需要加，会默认是10进制。</p>
</li>
</ol>
<h4 id="x任意类型bool">x(任意类型)==&gt;bool</h4>
<ol>
<li>
<p>bool = Boolean(x)</p>
</li>
<li>
<p>bool = !!x</p>
</li>
</ol>
<h4 id="x任意类型string">x(任意类型)==&gt;string</h4>
<ol>
<li>
<p>string = String(x)</p>
</li>
<li>
<p>string = x.toString()        但是在该种情况下有个bug，就是如1.toString()会报错，1.会触发小数点的逻辑，所以可以改为(1).toString()或者1..toString()。</p>
</li>
</ol>
<h2 id="9-知识扩展区">9. 知识扩展区</h2>
<p>更多JS的奇葩之处可看<a href="http://bonsaiden.github.io/JavaScript-Garden/zh/">JS秘密花园</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">数据类型</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>进制那点事儿</title>
                <link>https://twinklelixn.top/posts/else-transform/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/else-transform/</guid>
                <pubDate>Fri, 31 Jan 2020 19:48:11 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>数字虽然被分成不同的进制形式表示，但是其实际意义一样大，只是表示形式不一样。每类进制数的特点是，每一位都不准超过该类进制对应的值，如我们常用的是十进制数，逢10就进1，一位的最大数字是9，二进制数，一位对应的最大数字是1，十六进制的一位表示的最大数字是15，八进制的是7，规则是一样的。</p>
<h2 id="1-二进制与十进制间不得不说的事">1. 二进制与十进制间不得不说的事</h2>
<p>关于数字，我们常用的是十进制的数字，但是计算机只能识别二进制的机器语言，二进制下的数字只有0或1两种形式，因为计算机的存储原理是用高电平和低电平两种电平来存储0和1。只要涉及到和电脑打交道，就必须面临二进制与十进制间的相互转换，具体转换方式如下：</p>
<h4 id="二进制转十进制">二进制转十进制</h4>
<p>二进制转化为十进制有两种方法，如下所示：</p>
<p><strong>1) 通用法：</strong>(2)表示该数字是用二进制表示的数字，(10)表示十进制数，转化即如下例所示：</p>
<p><img src="/imgs/number_tranform_pic01.JPG" alt="number_tranform_pic01"></p>
<p>分别是在小数点前面的整数，从右往左为，2<sup>0</sup>,2<sup>1</sup>,2<sup>2</sup>......，再依次乘以对应位的数字，小数部分，是从左往右为2<sup>-1</sup>，2<sup>-2</sup>，2<sup>-3</sup>......，再依次乘以对应位置的数字，最后相加即可。</p>
<p><strong>2) 取巧法：</strong>，记住每一位对应的十进制数，即2<sup>0</sup>=1，2<sup>1</sup>=2，2<sup>2</sup>=4.....，然后按位相加即可。整数部分从右往左如下所示：</p>
<p>​	1		1		1		1		1		1		1		1    .(小数点)</p>
<p>128	64	 32	 16	 8	    4  	 2        1    .(小数点)</p>
<p>如一个二进制数为1101，则按照上面所示将对应位置为1的数字按位相加为 1+4+8=13(10)</p>
<h4 id="十进制转二进制">十进制转二进制</h4>
<p>十进制转二进制也有两种方法，如下所示：</p>
<p>**1) 通用法：**也叫除2取余，逆序排列法，下图来源百度，具体如下：</p>
<p><img src="/imgs/number_tranform_pic02.JPG" alt="number_tranform_pic02"></p>
<p>**2) 取巧法：**和上述的二进制取巧法一样，记住前8位置，每位对应的十进制数</p>
<p>1		1		1		1		1		1		1		1    .(小数点)</p>
<p>128	64	 32	 16	 8	    4  	 2        1    .(小数点)</p>
<p>然后这8位，最大表示的十进制数是最高位的前一位置对应的数字减1，即2<sup>8</sup>-1=255，这八位二进制数表示的最大整数是255，所以例如对于255以下的十进制数的转化，如173，则按照上述位置得128+32+8+4+1=173，则对应的二进制数为10101101。</p>
<h2 id="2-二进制与十六进制间不得不说的事">2. 二进制与十六进制间不得不说的事</h2>
<p>从上述二进制与十进制的转换可知，若一个很大的十进制数用二进制表示的话，需要很长一串二进制数字，电脑可以，人手写存入可麻烦了，因此便有了新的进制，十六进制和八进制。这里介绍十六进制和二进制的关系，八进制和其思想一样。具体转化如下：</p>
<h4 id="二进制转十六进制">二进制转十六进制</h4>
<p>低位往高位转是比较好转的，十六进制数是每4位二进制数是一位十进制数，4位二进制数可表示的十进制数最小为0，最大为1111(2)=1+2+4+8=15，符合十六进制的标准，但是进制数只能一位表示一个数，因此十六进制的基数为0、 1、2、3、4、5、6、7、8、9、A(10)、B(11)、C(12)、D(13)、E(14)、F(15)。二进制转十六进制，每四位为一组，从后往前取，不足的补0。例如：11010011分为1101(2)=13=D，0011=3即11010011(2)=D3。</p>
<h4 id="十六进制转二进制">十六进制转二进制</h4>
<p>一个十六进制数对应四位二进制数，</p>
<p>​	1		1		1		1    .(小数点)</p>
<p>​    8	  4  	 2        1    .(小数点)</p>
<p>如十六进制数3FD即，3(8)=0011，F(8)=1111，D(8)=1101，则3DF(8)=001111111101(2)。</p>
<h2 id="3-二进制与八进制间的转换">3. 二进制与八进制间的转换</h2>
<p>和二进制与十六进制的转换类似，八进制数是对应3个二进制数。基数为0、1、2、3、4、5、6、7。</p>
<h2 id="4-十六进制八进制与十进制的转换">4. 十六进制、八进制与十进制的转换</h2>
<p>那就先将十六进制转化成二进制，再转化成十进制，这样最容易。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/else/">Else</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/">进制转换</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>编码那些事儿</title>
                <link>https://twinklelixn.top/posts/else-encoding/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/else-encoding/</guid>
                <pubDate>Fri, 31 Jan 2020 19:45:41 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-编码的开始">1. 编码的开始</h2>
<p>我们常见用到十进制数字可以通过进制转换的方式转换成二进制存进电脑里，除了数字，我们常说的语言都是字符，那么如何将字符存入电脑里呢？最容易想到的方式就是为所有字符进行编号，每一个字符对应一个特定的编号，存入电脑，然后根据其编号，再解析出对应的字符。于是电脑出现后，编码这个词就出现了，编码方式就是指将数据、字符存储在计算机中的编号规则。随着计算机的发展，编码方式各家百花齐放。</p>
<h2 id="2-ascii码">2. ASCII码</h2>
<p>计算机最早是由西方国家发明出来的，由于西方国家说英语，因此英文字母、数字、特殊符号成了西方人编码的考虑内容，就像我们电脑键盘上的字母、字符基本都可以找到其对应的电脑编码。西方人发明了ASCII码(American Standard Code for Information Interchange: 美国信息交换标准代码)，是基于拉丁字母的一套编码系统。到目前为止一共收录了128个字符，毕竟是要用二进制存储，因此128个字符用7位二进制位来存储就够了，因为你比如，两个二进制位有2*2中组合，可以表示四个字符，00、01、10、11，2<sup>7</sup>=128，因此7位二进制位即可编号表示128个字符，但计算机存储一般是以字节为单位的，一个字节即8个二进制位，因此ASCII用8个二进制位存储，首位为0，也可以有其他含义。编码号可以用十进制0-127表示，也可用二进制、八进制、十六进制表示，0-127十进制编码号对应的ASCII码表如下：</p>
<p><img src="/imgs/encode_pic01.JPG" alt="encode_pic01"></p>
<p>以后的编码格式，需要将拉丁字母编码进去的，一般兼容ASCII码，也就是说其编码的前127位也是和ASCII码一样，为了方便和兼容。然后常用的需要记忆的编码为：</p>
<p>0：48表示</p>
<p>A：65表示</p>
<p>a：97表示</p>
<h2 id="2-gb2312编码">2. GB2312编码</h2>
<p>随着时代发展，计算机开始传入中国，中国人也开始用电脑了，那么问题就来了，电脑里存储编号的只是英文字符，中文字符无法存入，于是，中国国家标注局介入开始为汉字编码，名称为【国标2312】标准，是中国第一个计算机编码标准。取国标拼音首字母，即【GB2312】编码标准。由于中国汉字比较多，有上千个，因此一个字节肯定不够用，中国国标局就用2个字节，即16个二进制位表示一个汉字，即可以表示2<sup>16</sup>=65536个字符。收录一些常用汉字足够了，当时GB2312只收录了6000多汉字，西文字母和日文假名，并没有收录中国汉字的生僻字、繁体字和韩文等。由于16位二进制太长了，因此汉字编码编号一般用十六进制位表示，即是十六进制0000-FFFF。太多了表太长，具体可自行百度，如“爸”的GB2312编号为B0G6，只截取部分编码表如下：</p>
<p><img src="/imgs/encode_pic02.JPG" alt="encode_pic02"></p>
<h2 id="3-gbk编码">3. GBK编码</h2>
<p>由于GB2312编码中没有将汉字字符包括完全，导致一些生僻字、繁体字存不到电脑里，如我们常见的有的同学的名字里有个生僻字，存入电脑就无法解析出来，只用*表示。因此，微软就出手了，微软在GB2312的基础上制定了GBK编码，也就是国标扩，K即为扩展的扩字的首拼音字母。GBK编码包含21886个汉字和图形符号，收录的是中日韩使用的所有汉字，并且是完全兼容GB2312的，兼容意思就是说只是在GB2312编码的后续编号扩充，前面的编号也是和GB2312一样的。由于21886&lt;&lt;65536，所以，GBK也是用两个字节进行编码的。因此，在一段时间内，GBK编码在中国很受欢迎。</p>
<h2 id="4-gb18030编码">4. GB18030编码</h2>
<p>在微软制订了GBK编码后，中国国标局就出手了，毕竟汉字是中国占据大多数，理应由中国掌握标准，于是国标局又制定了GB18030，想取代微软的GBK，但是GB18030存在一个很大的问题导致其无法盛行，那就是其不兼容GB2312，也就是说以前在使用GB2312编码下写的汉字在GB18030编码下全乱了或者看不见了，因此很少人会去用它，GB18030编码取代失败。</p>
<h2 id="5-unicode编码">5. Unicode编码</h2>
<p>随着电脑的普及，几乎世界各地都在用电脑了，那么问题就又出现了，一些国家的奇怪字符就无法被存入电脑了，如中国的西藏地区的藏文，泰国的泰文等奇怪字符，在目前的编码中都尚未录入。那只能再接着扩充编号，将其加入进去，为了不再发生类似的问题，就发明了万国码，Unicode，Uni即是Unify统一的简称，即统一的编码方式，已经收录了13万的字符，在全世界通用，并在不断扩充中。那么13万&gt;&gt;65536，因此2个字节的编码已经不再够用了，每个字符的存储都要在3个字节或及其以上了。这样也暴露了Unicode编码格式的一个大缺点，即相比于GBK，Unicode的一个字符的存储所占的内存扩大了50%，这样所有文件大小都要扩大50%，当时的硬盘内存可是很贵的，因此这个缺点注定Unicode编码在当时无法盛行。</p>
<h2 id="6-utf-8编码">6. UTF-8编码</h2>
<p>UTF-8编码是在Unicode编码方式上的进一步优化，采取变长的方式存储字符，对于前127位的英文字符，Unicode前16位二进制位都为0，其采用一个字节存储，对于汉字“爸”这样的字符Unicode前8位的二进制数为0，其就采用两个字节存储，并对确实占用三个字节的符号的存储也是有其更简单的特殊的方式存储。变长的字符如何区分分别是占几位呢？这就是UTF-8的巧妙之处，可具体搜索UTF-8的存储原理。由于UTF-8采取变长的方式存储，可能比定长存储的GBK编码还要省空间，并且支持的字符多，因此很受欢迎。并且UTF-8中的8表示的是一个字符至少是需要8位存储的，即是8位、16位、24位等。</p>
<p>特别注意：UTF-8还是用到Unicode的字符集，只是存储方式不一样。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/else/">Else</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/">编码方式</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JS语法基础</title>
                <link>https://twinklelixn.top/posts/javascript-basic-grammar/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-basic-grammar/</guid>
                <pubDate>Fri, 31 Jan 2020 19:41:06 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-写在前面">1. 写在前面</h2>
<p>随着JS版本的不断升级，原有标准不断改变，很多旧的语法都被淘汰，新的语法不断补充。但JS有一个好处是高版本标准是始终兼容旧版本的，旧的语法只是如今不再使用，但以前的语法还是起作用的。看到我前面介绍的JS发展历史可知，JS是在2015年ES6标准发布后开始了新的发展，也是在ES6版本之后JS开始正式步入正轨，之后每年都跟新的版本也是在ES6版本的基础上变化的，差别不大，因此这里介绍的JS知识是基于ES6标准的基础知识，适用于最新的大多数浏览器，也会注明哪些是新的知识。</p>
<h2 id="2-表达式语句变量与标识符">2. 表达式、语句、变量与标识符</h2>
<h4 id="表达式">表达式</h4>
<p>表达式是一个为了得到某个值的计算式，类似于我们做数学题时等号左边的式子，但JS中的表达式的含义有所延伸，如下几种形式都是表达式，表达式一般都有值</p>
<ol>
<li>
<p>计算式 3 + 5，值为8</p>
</li>
<li>
<p>函数add(3,5)也是表达式，也有值其值叫做返回值。</p>
</li>
<li>
<p>console.log也是一个表达式，其值是log函数本身。</p>
</li>
<li>
<p>console.log(3)和add(1,2)一样是函数的调用的函数表达式，其值为函数返回值，该函数没有返回值，为undefine。</p>
</li>
</ol>
<h4 id="语句">语句</h4>
<p>语句是执行某种操作的描述，可用于改变环境，一般没有返回值，语句以分号结束，一个语句加一个分号表示该语句的结束。但在JS脚本语言中，JS程序的执行单位是行，因此在这一行没有分号的情况下，一行就是一个语句。由此可知，JS脚本编写时，有的程序员写语句不写分号，有的写分号，是都可以的，看个人习惯。不写分号按照一行一个语句执行，写了分号按照分号执行语句。</p>
<h4 id="变量">变量</h4>
<p>变量就是为值取名，引用这个名字就是使用这个值，变量和值在内存中的存储位置也不一样，变量是在变量区，值是在栈区或堆区。且JS的变量名区分大小写，var a 和 var A 是两个不同的变量，Object和object也是两个不同的东西。</p>
<h4 id="标识符">标识符</h4>
<p>标识符是用来识别不同值的合法命名，最常见的标识符是变量名。标识符的定义是要遵循一定的规则的，具体如下：</p>
<ol>
<li>
<p>首字母必须是、Unicode字母、$美元符号、_下划线、中文</p>
</li>
<li>
<p>第二个及其以后的字母是除了以上以外可以是数字</p>
</li>
<li>
<p>中文是合法的标识符</p>
</li>
</ol>
<h4 id="总结js语法注意点">总结JS语法注意点</h4>
<ol>
<li>语句是否必须加分号</li>
</ol>
<p>JS是按行执行，若一行只有一个语句可以不加分号，默认这一行是一个语句，根据编程习惯自己选择。</p>
<ol start="2">
<li>大小写敏感</li>
</ol>
<p>JS标识符区分大小写，var A 和 var a是两个不同的变量</p>
<ol start="3">
<li>空格的作用</li>
</ol>
<p>空格没有实际意义，加再多空格也不影响语句。加回车也不影响语句。</p>
<p><strong>在return语句的后面不能加回车，return这一行会被执行，然后直接返回了，不会执行回车换行后面的了</strong></p>
<h2 id="3-条件语句">3. 条件语句</h2>
<p>条件语句是用于判断，如果满足什么情况，就执行什么操作。JS提供了两种条件判断语句，分别是if语句和switch语句，具体用法如下：</p>
<h4 id="if语句">if语句</h4>
<p><strong>单if语句结构为：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">语句1</span>
<span class="p">}</span><span class="c1">//如果满足表达式，就执行语句1
</span></code></pre></td></tr></table>
</div>
</div><p>当{ 代码块 }中的语句是只有一句时，是可以省略花括号{ }的，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">)</span>
    <span class="nx">语句1</span>
    <span class="nx">语句2</span> <span class="c1">//该语句不属于if条件成立的代码中，因为没有花括号{}就只是包含一行一个语句。只是缩进有问题，            使其看起来像，这是一个坑也是一个考点。因此不管几个语句，最好使用{}括起来
</span></code></pre></td></tr></table>
</div>
</div><p><strong>if else语句结构为：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">)</span><span class="p">{</span>
   <span class="nx">满足条件执行的语句1</span>
<span class="p">}</span>
<span class="k">else</span><span class="p">{</span>
   <span class="nx">不满足条件执行的语句2</span> 
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>并且if和else中的语句还可以再嵌套if、else语句，例如在else语句中嵌套if、else语句如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">表达式1</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">语句1</span>
<span class="p">}</span>
<span class="k">else</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">表达式2</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">语句2</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="nx">语句3</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上则又引申简写为另外一种形式如下，即成了if 、else if、else语句。但其实这种语句并不存在，是在else语句中嵌套if else语句的简写。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">表达式1</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">语句1</span>
<span class="p">}</span>
<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式2</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">语句2</span>
<span class="p">}</span>
<span class="k">else</span><span class="p">{</span>
    <span class="nx">语句3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上的if、else if、else语句也可用单if语句组合实现，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">表达式1</span><span class="p">)</span><span class="p">{</span>
       <span class="nx">语句1</span>
       <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">表达式2</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">语句2</span>
       <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">表达式3</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">语句3</span>
       <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="switch语句">switch语句</h4>
<p>当有多种情况可供选择时，使用if语句太麻烦，可使用switch选择语句，具体语法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">switch</span><span class="p">(</span><span class="nx">变量或表达式</span><span class="p">)</span><span class="p">{</span>
    <span class="k">case</span> <span class="nx">值1或表达式1</span><span class="o">:</span>
        <span class="nx">语句1</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">值2或表达式2</span><span class="o">:</span>
        <span class="nx">语句2</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">值3或表达式3</span><span class="o">:</span>
        <span class="nx">语句3</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="nx">语句4</span><span class="p">;</span> <span class="c1">//是除上述情况外的其他剩余情况值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>进入switch语句后的变量值或表达式和值1或表达式1的判断是用严格等于(===)判断的，即严格相等运算符，即意味着比较时不会进行类型转换，如1和true是不等的。若是表达式，则用其表达式的运算结果比较，不比较运算过程，如 1+3 和 2+2 是相等的表达式。</p>
<p><strong>注意：</strong></p>
<p>每个case选择情况执行完后要加break，加了break则意味着当前选择已结束，不再往后选择。若不加break，则会继续往后执行语句，直到遇到break语句或结束位置。这样设计break的原因其实是为了方便多种情况对应一个结果的写法，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">switch</span><span class="p">(</span><span class="nx">变量或表达式</span><span class="p">)</span><span class="p">{</span>
	<span class="k">case</span> <span class="nx">值1或表达式1</span><span class="o">:</span>
    <span class="k">case</span> <span class="nx">值2或表达式2</span><span class="o">:</span>
        <span class="nx">语句1</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span> <span class="c1">//以上1、2两种情况下都会执行语句1
</span><span class="c1"></span>    <span class="k">case</span> <span class="nx">值3或表达式3</span><span class="o">:</span>
    <span class="k">case</span> <span class="nx">值4或表达式4</span><span class="o">:</span>
        <span class="nx">语句2</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span><span class="c1">//以上3、4两种情况下都会执行语句2
</span><span class="c1"></span>    <span class="k">default</span><span class="o">:</span>
        <span class="nx">语句3</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="4-循环语句">4. 循环语句</h2>
<p>循环语句是用于当满足某一条件时，就一直执行某一操作的情况。JS提供了三种循环语句，分别是while循环、do while循环和for循环，具体语法结构如下：</p>
<h4 id="while循环">while循环</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">while</span><span class="p">(</span><span class="nx">条件</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">循环体语句</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><p>以上结构的意思是当条件为真时，执行循环体语句，然后再判断条件是否为真，再执行，一直循环下去，直至条件为假或遇到break退出循环。</p>
<h4 id="do-while循环">do while循环</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">do</span><span class="p">{</span>
    <span class="nx">循环体</span>
<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">条件</span><span class="p">)</span><span class="p">;</span> <span class="c1">//后面的分号不能少
</span></code></pre></td></tr></table>
</div>
</div><p>以上结构和while循环类似，唯一不同是，do while是先执行一次循环体再判断条件是否为真，若为真，再执行循环体，依次类推循环。也就是说，不管条件是否为真，循环体都至少执行1次。</p>
<h4 id="for循环">for循环</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span><span class="p">(</span><span class="nx">初始表达式</span><span class="p">;</span> <span class="nx">条件</span><span class="p">;</span> <span class="nx">递增表达式</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以上结构的执行过程为，初始表达式只执行一次，判断条件是否为真，若问真，则执行循环体，然后执行递增表达式，再执行条件判断，若条件为真，则再次执行循环体，再执行递增表达式，以此类推，直至遇到break语句或者结束。</p>
<h4 id="循环中的两个重要语句">循环中的两个重要语句</h4>
<p><strong>break：</strong></p>
<p>退出当前所在的整个循环</p>
<p><strong>continue：</strong></p>
<p>退出这一次的循环，执行下一次循环</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/js%E8%AF%AD%E6%B3%95/">JS语法</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JavaScript的发展</title>
                <link>https://twinklelixn.top/posts/javascript-history/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/javascript-history/</guid>
                <pubDate>Tue, 28 Jan 2020 12:44:03 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-javascript的诞生">1. JavaScript的诞生</h2>
<p>JavaScript，简称JS(以下均用JS代替)。JS之父是美国的Brendan Eich(中文翻译：布兰登·艾克，以下简称布兰登)发明的。在1995年，html和css刚被发明后不久，布兰登被只靠一款浏览器(Netscape Navigator)发家的网景公司雇佣为其浏览器开发一些附加功能，JS随即诞生。JavaScript脚本名字的由来是被要求要蹭Java的热度，当时sun公司将Oak语言改名为Java，正式向市场推出并大肆宣传。当时的网景公司就和Java的母公司合作，并要求布兰登开发的浏览器脚本的名字要和Java有关，因此才叫JavaScript。但实际上，二者除了一开始命名有合作外，两种脚本语言上没有任何关系，JS是一个全新的脚本语言。因为两个公司有合作，因此浏览器一开始是同时支持Java和JavaScript语言的，只是使用Java要安装插件，后来Java被从浏览器端淘汰，浏览器前端就只留下了JavaScript。</p>
<h2 id="2-es标准的诞生">2. ES标准的诞生</h2>
<p>一开始的时候JS只是网景公司浏览器的一个附加功能，而且是JS之父布兰登在时间紧、任务重、自己也不想好好搞的情况下创造的，并未申请成为一个脚本语言标准，但随着JS的用户体验越来越好，每家浏览器公司就开始各种开发JS的山寨版本，因此每家浏览器的JS脚本都不太一样，网景公司一看这种情况得要立马维权啊，毕竟JS是它公司首创的，因此网景公司便立马向ECMA(欧洲计算机制造联合会)提交JS语言标准，由于不能和Java语言标准命名冲突，不能叫JavaScript标准，故改叫ECMAScript标准，从此JS就成了一个脚本和标准命名不一样的编程语言。因此我们常听到的ES6就是ECMAScript6，是JavaScript语言标准的第六版本。也就是说，JS在才是个没有好好搞的初始版本的情况下就被写入了标准，因此存在着很多的问题，在后续会慢慢暴露出来。</p>
<p>JS与ES的主要区别是，JS是在浏览器上具体实现的语言，ES是JS完整实现后总结规定的语法标准，也就是说，一般是先用JS具体开发实现某些功能，然后总结写成标准的，JS发展先于ES，但JS语法要遵循ES标准。</p>
<p>后来网景公司死了，其旗下的网景浏览器涅磐重生，改造成firefox火狐浏览器，由JS之父布兰登参与联合创建的Mozilla基金会维护。</p>
<h2 id="2-es标准的发展">2. ES标准的发展</h2>
<p>ECMAScript标准，简称ES标准，在其发展历程中，使用范围最广的版本是在1999年12月发布的第三版，ES3，并且这个版本ie6是支持的。然后其第四版因为增加的功能太多，而且是在ie6如日中天的统治时期，未能成功问世，直接跳到了在2009年12月发布的第五版，ES5。再到2015年6月发布的第六版，ES6，大多数最新的浏览器都支持。自ES6开始，ES标准每年更新一个版本，并以当年的年号命名。如2017年是ES8或者说是ES2017。</p>
<h2 id="3-js的自我证明">3. JS的自我证明</h2>
<p>自从JS申请了ES标准后，其要想在浏览器功能中占据一席之地，得拿出来相比于基于html和css的网页，除了速度快之外的特征性优势。那就是谷歌Gmail在线邮件系统网页的出现，让开发者眼前一亮，因为早期人们只认为网页只能看新闻、图片等，使用某个应用软件必须要下载，但Gmail是一个在线的应用，不需下载，直接在线登录邮箱使用。且JS相比于在浏览器上运行的其他技术来说，更能支持移动端的运行，这使得JS的优势逐渐突出，逐渐得到发展。</p>
<h2 id="4-js的爆发式发展">4. JS的爆发式发展</h2>
<p>2009年，Ryan基于JS引擎V8开发了node.js，在随后的一年，即2010年，Isaac基于node.js开发了npm。然后两人进行合作，将npm嵌入node.js，也就是我们目前安装node.js就自动带有npm，组合出强大的功能。使得前端工程师可以在浏览器之外运行JS了，也就是说可以用node.js做http-server，可以做后端开发。再后来，TJ发布了Express.js框架，使得node.js火起来。从2010年开始，各种前端技术框架大爆发，快速更替发展。直到目前仍存活且流行的有React、Vue、Angular等。node.js引导前端变成全栈开发，也就是说node.js拓宽了JS的发展之路，使得JS爆发式发展。</p>
<h2 id="5-js的发展趋势">5. JS的发展趋势</h2>
<p>一开始的时候，浏览器不只是支持JS脚本语言，也支持Java、Flash、VBScript等脚本语言，但最后只有JS语言在浏览器上存活下来，并且一直在发展。在2015年发布的ES6之前的JS语言确实有些混乱，相比于其他语言来说JS并不是一个很好的语言，毕竟其在一开始被开发的时候时间短任务重，创建者也没好好搞，就被推着火了。但是在2015的ES6版本后，随着node.js技术的发展，JS发展空间更大了，发展前景也很大。</p>
<h4 id="参考和推荐">参考和推荐</h4>
<p>发展史来源于维基百科和其他JS历史参考，以下推荐一些大佬写的比较好全面的历史介绍：</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">推荐1</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">推荐2</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">推荐3</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/javascript/">JavaScript</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/javascript/">JavaScript</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CSS动画</title>
                <link>https://twinklelixn.top/posts/css-animation/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/css-animation/</guid>
                <pubDate>Tue, 28 Jan 2020 12:41:25 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-浏览器渲染原理">1. 浏览器渲染原理</h2>
<p>浏览器提供的所有功能中有一个非常重要的功能机制即渲染页面功能，使用渲染引擎实现，浏览器的渲染原理是不断擦掉重绘的过程，渲染过程如下：</p>
<p><strong>1) 根据HTML构建HTML树(DOM)</strong></p>
<p><strong>2) 根据CSS构建CSS树(CSSDOM)</strong></p>
<p><strong>3) 将两棵树合成一棵渲染树(render tree)</strong></p>
<p><strong>4) layout确定布局定位</strong></p>
<p><strong>5) Paint绘制上色</strong></p>
<p><strong>6) 根据层叠上下文进行Composite合成</strong></p>
<p>在绘制完成后，可通过JS改变CSS样式，通过JS引擎与渲染引擎进行通信，告诉渲染引擎重新绘制页面，一般进行4、5、6过程，即layout、paint、composite，根据JS改变的情况确定重新渲染的步骤。可在该网站查看哪些属性触发哪些步骤<a href="https://csstriggers.com/">CSSTriggers</a></p>
<p><strong>关于浏览器渲染原理的三个推荐网站</strong></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">推荐1</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/">推荐2</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count">推荐3</a></p>
<h2 id="2-css性能问题">2. CSS性能问题</h2>
<p>在开发者工具中，按下Esc键，出来新的控制台面板，再按Esc键取消。在...more tool中选择Rendering，勾选Paint Flashing，刷新页面，看到绿色的块快在闪，说明浏览器在重新渲染绘制页面。</p>
<p>在开发者工具中调试数据值时，鼠标光标放置在数字上，按上下可增1减1,按住shift键再按上下可增10减10</p>
<p><strong>1) 优化方法1</strong></p>
<p>运用translate平移，而不用left平移。</p>
<h2 id="3-css之transform属性">3. CSS之transform属性</h2>
<p>transform即变形的意思，元素在该属性下，可进行平移、旋转、缩放等变形，具体变形方式如下：</p>
<h3 id="translate平移属性">translate平移属性</h3>
<p><strong>1) 常用属性值</strong></p>
<p>translateX：向X轴横轴方向平移，若平移的值为百分数，则表示的是移动本元素X轴方向长度的百分比数。</p>
<p>translateY：向Y轴纵轴方向平移</p>
<p>translateZ：向三维空间的Z轴方向平移，需要配合视图框和视点，在移动元素的父元素中的属性中确定视点距离屏幕的距离，视点的平面位置是父元素的正中心，Z轴值的变化是元素逐渐向视点靠近或远离的，如下图所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">wrapper</span><span class="p">{</span>
  <span class="k">perspective</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span><span class="err">/</span><span class="err">/</span><span class="err">视</span><span class="err">点</span><span class="err">距</span><span class="err">离</span><span class="err">屏</span><span class="err">幕</span><span class="err">平</span><span class="err">面</span><span class="err">的</span><span class="err">距</span><span class="err">离</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>translate：X轴和Y轴方向的变化值</p>
<p>translate3d：X轴、Y轴和Z轴的变化值</p>
<p><strong>2) translate的巧用</strong></p>
<p>可结合绝对定位设置元素绝对居中，具体设置如下：</p>
<p>设置元素为绝对定位，设置其父元素为绝对定位（根据CSS定位的原理设置的，可参考CSS定位原理），然后在绝对定位设置left: 50%，top: 50%，此时元素的锚点所在位置即左上角点即在父元素正中心，再利用transform的百分数值平移，translateX(-50%)和translateY(-50%)，或者简写形式，如下图所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">父元素</span>
<span class="p">.</span><span class="nc">wrapper</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">300</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">定位子元素</span>
<span class="p">#</span><span class="nn">demo</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
  <span class="k">left</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">top</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">)</span> <span class="nb">translateY</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">)</span><span class="p">;</span>
  <span class="c">/*或transform: translate(-50%, -50%);*/</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="rotate旋转属性">rotate旋转属性</h4>
<p><strong>1)常用属性值</strong></p>
<p>rotate：默认绕着垂直于屏幕的Z轴旋转，值的单位为度，deg，如rotate(30deg)。</p>
<p>rotateX：绕着X轴旋转，要想象XYZ的立体空间。</p>
<p>rotateY：绕着Y轴旋转</p>
<p>rotateZ：默认旋转方向。</p>
<h3 id="scale缩放属性">scale缩放属性</h3>
<p><strong>1) 常用属性值</strong></p>
<p>scale：X轴和Y轴同时缩放</p>
<p>scaleX：X轴缩放</p>
<p>scaleY：Y轴缩放</p>
<p>可配合transition: all 1s; 属性设置过渡缩放效果。</p>
<h4 id="skew倾斜属性">skew倾斜属性</h4>
<p>skew、skewX、skewY，均尝试下可看到效果，取值单位也是度deg。</p>
<h4 id="总结">总结</h4>
<p>以上的transform属性可同时使用，直接空格隔开即可，不能写两个tranform，那样会覆盖的。</p>
<h2 id="4-css之transition属性">4. CSS之transition属性</h2>
<p>transition即过渡的意思，该属性设置语句要加在要使用的元素本体上，功能是在元素的初始状态和结束状态之间添加过渡帧，使之过渡流畅。具体语法为：</p>
<p>transition: 属性名(all/其他) 时长(m/ms) 过渡方式 延迟(m/ms);</p>
<p>语法解读为：当该元素的该属性变化时，在设置的时长内，以该种过渡方式慢慢变化至末尾状态，若设置了延迟时间，则要等待延迟时间结束后执行该变化。</p>
<p><strong>过渡方式</strong>：</p>
<p>linear：线性过渡</p>
<p>ease：非线性过渡</p>
<p>ease-in / ease-out / ease-in-out / cubic-bezier / step-star / step-end / steps</p>
<p>具体过渡函数的解释可看如下链接<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function">mdn</a></p>
<p><strong>无法过渡的属性：</strong></p>
<ol>
<li>display: block 到display: none，或者反过来，无法过渡</li>
</ol>
<h2 id="5-css之animation属性">5. CSS之animation属性</h2>
<p><strong>1) 定义关键帧</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">keyframes</span> <span class="nt">自定义动画名</span><span class="p">{</span>
    <span class="nt">0</span><span class="o">%</span><span class="p">{</span>
        <span class="err">位</span><span class="err">置</span><span class="err">变</span><span class="err">化</span><span class="err">1</span>
    <span class="p">}</span>
    <span class="nt">50</span><span class="o">%</span><span class="p">{</span>
        <span class="err">位</span><span class="err">置</span><span class="err">变</span><span class="err">化</span><span class="err">2</span>
    <span class="p">}</span>
    <span class="nt">100</span><span class="o">%</span><span class="p">{</span>
        <span class="err">位</span><span class="err">置</span><span class="err">变</span><span class="err">化</span><span class="err">3</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>2) 调用帧动画</strong></p>
<p>animation: 时长 | 过渡方式 | 延迟时长 | 次数 | 方向 | 填充模式 | 是否暂停 动画名</p>
<p>动画名：是必须有的选项。</p>
<p>时长 / 延迟时长：以m秒和ms毫秒为单位</p>
<p>过渡方式：和transition的过渡方式一样</p>
<p>次数：数值，无数次是 infinite</p>
<p>方向：reverse、alternate、alternate-reverse。</p>
<p>填充模式：none、forwards、backwards、both。</p>
<p>是否暂停：paused、running。</p>
<p>每个对应属性都有自己的单独属性。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/css/">CSS</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/css/">CSS</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CSS标准文档流</title>
                <link>https://twinklelixn.top/posts/css-normal-flow/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/css-normal-flow/</guid>
                <pubDate>Tue, 28 Jan 2020 12:37:54 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-标准文档流是什么">1. 标准文档流是什么？</h2>
<p>标准文档流(normal-flow)是学习css的重要概念之一，css是用来装饰html元素的样式，标准文档流指的就是css规定的html元素之间排布方向的标准流向，即css规定html元素之间为从左到右、从上到下的流向排布，如下图所示排布：</p>
<p><img src="/imgs/flow_pic01.JPG" alt="flow_pic01"></p>
<h2 id="2-文档流中的元素分类">2. 文档流中的元素分类</h2>
<p>由上图可看出，有的元素是横向排布直至占满一行后才换行，而有的元素是自己就占了一行，新增元素直接占据下一行，这样的排布将元素分成了两大类。</p>
<h4 id="内联元素">内联元素</h4>
<p>内联即inline元素，特点是元素大小由其内联内容(如文字)的长宽决定的，典型的有span元素，其排布顺序为从左到右、从上到下排布，不浪费空间，直到达到最右边才换行，因此会存在将元素分成两半的情况，如下图所示：</p>
<p><img src="/imgs/flow_pic02.JPG" alt="flow_pic02"></p>
<p><strong>特点</strong>：</p>
<ol>
<li>
<p>无法设置其宽width和高height，只能由其内联内容的大小决定，即不接受自定义宽高。</p>
</li>
<li>
<p>该元素下的自定义上下margin值没有用，左右margin值有用。</p>
</li>
<li>
<p>padding的左右值会改变实际宽度，但padding的上下值只是会改变可视高度，不会改变文档流中定义的元素的实际高度。可能有点抽象，我也觉得有点难以理解，看图解释如下：给内联元素设置了padding从视觉上看其变大了，但是文档流认识其宽度，但不认识其高度，还是以其原来的高度来定位其位置，因此给下一个div元素分配空间时也是以span占据的原来的高度往下分配的，因此称为padding只是改变内联元素视觉高度，不改变其实际高度。内联元素的实际大小只能由其内联内容决定。</p>
</li>
</ol>
<p><img src="/imgs/flow_pic03.JPG" alt="flow_pic03"></p>
<ol start="4">
<li>内联元素的实际高度由其行高属性间接决定，即{line-height: 100px}，与height的值无关，如下图所示设置了span元素的行高后，实际高度变高，但视觉高度没有变高。之所以说是间接影响，是因为如果换个字体，高度就会改变了。(css的属性间不正交引起的)</li>
</ol>
<p><img src="/imgs/flow_pic07.JPG" alt="flow_pic07"></p>
<h4 id="块级元素">块级元素</h4>
<p>块级即block元素，特点是每一个元素都自己占一行，典型的有div元素，其排布顺序默认是从上往下一行行排布，新增一个就向下排布一个，如下图所示：</p>
<p><img src="/imgs/flow_pic04.JPG" alt="flow_pic04"></p>
<p><strong>特点</strong>：</p>
<ol>
<li>
<p>默认高度由其包含的文档流内容的高度决定，若里面的内容不是文档流元素，如脱离了文档流的元素，则不规块级元素管，不包含在块级元素的高度范围内。 默认宽度为auto，即要多宽有多宽，默认占满一行，但宽度不是100%。</p>
</li>
<li>
<p>可以自定义宽度和高度，宽度不满一行整个元素也占一行。即只要是块级元素，即属性值为block，则就是自己独占一行。</p>
</li>
</ol>
<h4 id="实际不区分">实际不区分</h4>
<p>实际上，html元素根本没有内联元素和块级元素之分，只是如果不自行设置，某些元素会被浏览器默认以某种类型展示，如span元素即默认是内联类型，div元素默认是块级类型。但其实任何一个html元素都可通过设置对应的css属性来设置其需要的流动类型。这个css属性就是{display: inline / block / inline-block}，每个属性值解释为：</p>
<p><strong>display: inline</strong>：设置为该属性值后，元素即拥有内联的属性，排布样式和特点即为上述内联元素的排布样式和特点。</p>
<p><strong>display: block</strong>：设置该属性值后，元素即成了块级元素，遵循块级元素的排布顺序和特点。</p>
<p><strong>display: inline-block</strong>：内联块，这个属性值是综合了内联元素和块级元素的特点，不会将一个元素分成两半，始终维持元素成块的特点，即inline值下的元素直至铺满才换行，存在元素分成两半的情况，但inline-block值下的元素若该行放不下该元素就会另起一行，如下图所示：</p>
<p><img src="/imgs/flow_pic05.JPG" alt="flow_pic05"></p>
<p>与此同时，其拥有的特点也区分于inline，继承了block的一些特点，具体如下：</p>
<p><strong>特点</strong>：</p>
<ol>
<li>
<p>和inline元素一样默认大小为内联内容大小，但是inline-block元素允许设置width、height来自定义宽度和高度。</p>
</li>
<li>
<p>自定义margin的上下左右值均有效。</p>
</li>
<li>
<p>padding值会改变元素的实际大小。如下图所示：</p>
</li>
</ol>
<p><img src="/imgs/flow_pic06.JPG" alt="flow_pic06"></p>
<h2 id="3-补充说明">3. 补充说明</h2>
<p>以上所指的在文档流中的元素分为实际大小和视觉大小，其中的实际大小是指，css按照标准文档流规则排布元素时看到的元素所占据的大小，除去元素占据的大小，将剩余的空间再次分配。而视觉高度是指，加了border后人眼看到的元素大小，可能因为和实际大小不符合而遮盖下面的元素。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/css/">CSS</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/css/">CSS</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E6%96%87%E6%A1%A3%E6%B5%81/">文档流</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CSS盒模型</title>
                <link>https://twinklelixn.top/posts/css-box-model/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/css-box-model/</guid>
                <pubDate>Tue, 28 Jan 2020 12:34:37 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-是什么">1. 是什么</h2>
<p>css在为html元素设置样式时，将每一个html元素看作一个盒子，在css根据文档流标准为元素分配空间时是根据元素的盒子大小分配的，在任意一个网页上打开开发者工具，选择页面一个元素，都可看到如下的盒模型：</p>
<p><img src="/imgs/box_pic01.JPG" alt="box_pic01"></p>
<h2 id="2-由外向内的内容组成">2. 由外向内的内容组成</h2>
<h4 id="margin外边距">margin—外边距</h4>
<p>如上图的盒模型所示的位置，margin是盒模型最外面一层的空间区域，可自定义设置上下左右大小，一般看不见，但确实存在，用于排布元素与其他元素的间隔距离。</p>
<h4 id="border边框">border—边框</h4>
<p>如上图的盒模型所示的位置，border是可以用设置{border: 1px solid red}样式看到的，也是盒模型的组成中唯一可以明显看到大小的一项，是视觉上可以看到的元素的大小。</p>
<h4 id="padding内边距">padding—内边距</h4>
<p>如上图的盒模型所示的位置，内边距padding和外边距一样也是看不到但真实存在的元素中的空间组成部分，用于设置元素的边界和内容content之间的距离。</p>
<h4 id="content内容">content—内容</h4>
<p>如上图的盒模型所示的位置，padding里面的部分是内容content，是元素里面的文字或者其他元素内容。其大小也是视觉上看不到的，若padding值为0时，内容大小是border内线围成的大小。</p>
<h2 id="3-盒模型分类">3. 盒模型分类</h2>
<p>盒模型分为两种，一种是内容盒(content-box)，一种是边界盒(border-box)，两者的区别如下：</p>
<h4 id="1-content-box">1. content-box</h4>
<p>conten-box，是浏览器设置的默认值，每个html元素浏览器默认设置看作是内容盒子，属性设置语句为{box-sizing: content-box;}，用法是，针对元素的width、height属性，设置的大小是设置的盒模型中的content部分的大小，设置元素的width: 200px ，得到的盒模型如下图所示，可知是content内容的宽度为200px。</p>
<p><img src="/imgs/box_pic02.JPG" alt="box_pic02"></p>
<h4 id="2-border-box">2. border-box</h4>
<p>通过设置元素的样式为{box-sizing: border-box;}，则可将元素设置为边界盒，则针对元素的width、height属性，设置的大小是设置的盒模型中的border外边框包含的所有里面的大小，设置元素的width: 200px ，得到的盒模型如下图所示，则200 = border(1+1)+padding(20+20)+content(158)，除去border和padding大小剩余的即为content大小。</p>
<p><img src="/imgs/box_pic03.JPG" alt="box_pic03"></p>
<h4 id="3-哪个好用些">3. 哪个好用些？</h4>
<p>我觉得因人而异吧，我觉得border-box好用些，因为在盒模型的组成部分中，只有边界border可显示出来视觉上明显看到，使用边界盒可以看到使用width和height属性设置的元素大小。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/css/">CSS</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/css/">CSS</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/">盒模型</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CSS布局</title>
                <link>https://twinklelixn.top/posts/css-layout/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/css-layout/</guid>
                <pubDate>Tue, 28 Jan 2020 12:29:49 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="前言">前言</h2>
<p>CSS页面布局方式有多种，这里介绍三种针对不同需求的布局方式，分别为float布局、flex布局、grid布局，每种布局属性的浏览器支持程度可通过<a href="https://caniuse.com/">caniuse</a>网站进行查询，这三种布局的具体使用方式和区别如下：</p>
<h2 id="1-float布局方式">1. float布局方式</h2>
<h4 id="需求分析">需求分析</h4>
<p>float布局是专门用于兼容ie浏览器的一种布局，几乎所有浏览器都支持float，但是float布局其相比于其他布局方式有点复杂，所以用float布局一般是为了兼容ie浏览器和其旧版本，若不必兼容ie，可使用下列比较简单好用的布局方式，float布局具体使用方式如下：</p>
<h4 id="float的常用三种取值">float的常用三种取值</h4>
<p><strong>float: none</strong>：</p>
<p>float的浏览器默认值，即不自定义float属性值时，该属性值为none，意味着该元素没有脱离标准文档流。只要自定义设置了float的属性值为非none值，则该元素就脱离了标准文档流的流向，成为了浮动元素。</p>
<p><strong>float: left</strong>：</p>
<p>设置float值为left时，首先意味着该元素脱离文档流成为了浮动元素，其次是该值含义是该元素必须浮动在其所在块级容器剩余可用空间的最左侧，即该元素被移出正常的文档流向，一直向左移动，直到碰到了所处容器剩余可用空间的最左端边框或者碰到了另外一个浮动元素。如下图的左浮动示例图所示：</p>
<p><img src="/imgs/layout_pic01.JPG" alt="layout_pic01"></p>
<p><strong>float: right</strong>：</p>
<p>同left值的变化类似，该值的含义是该元素必须浮动在其所在块级容器剩余可用空间的最右侧，脱离文档流后一直向右移动，直到碰到所在容器剩余可用空间的最右端边框或者碰到另外一个浮动元素。如下图的右浮动示例图所示：</p>
<p><img src="/imgs/layout_pic02.JPG" alt="layout_pic02"></p>
<h4 id="脱离文档流后再归父元素管理">脱离文档流后再归父元素管理</h4>
<p>浮动元素脱离文档流后由于其流向不再符合正常文档流向，所以可能会出现一些布局交叉乱掉的情况，如下图所示，这些元素都有一个共同的父元素，父元素的边框为蓝色，如下图所示，只有非浮动元素在父元素中，浮动元素不被包含在父元素中，也就是说，脱离文档流的元素不再归其父元素管了。</p>
<p><img src="/imgs/layout_pic03.JPG" alt="layout_pic03"></p>
<p>若想让浮动元素也归父元素管理，则只需在父元素中添加class=&quot;clearfix&quot;的class属性，然后设置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">clearfix</span><span class="p">:</span><span class="nd">after</span><span class="p">{</span>
	<span class="k">content</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">block</span><span class="p">;</span>
    <span class="k">clear</span><span class="p">:</span> <span class="kc">both</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>设置后的效果如下图所示，可看出，浮动元素也归父元素管理了。</p>
<p><img src="/imgs/layout_pic04.JPG" alt="layout_pic04"></p>
<h4 id="自定义float值后的一些变化">自定义float值后的一些变化</h4>
<p>自定义float值后左浮、右浮成为浮动元素后，由于css属性的非正交性(即一个属性的改变会影响另外一个属性的改变，即非正交)，会改变一些属性，目前我知道的其改变的属性如下：</p>
<ol>
<li>
<p>改变了该元素的display属性值，若该元素的display属性值原本是inline或者inline-block，都会被改成了block值，成为块级元素。</p>
</li>
<li>
<p>block块级元素的属性中自己占据一行的特点被改变，不再是自己占据一行，而是根据其内容大小确定其宽度，当然也可自定义宽度，而且若不自定义宽度width，可能还会出一些问题，所以最好设置了float浮动后加上width属性值。</p>
</li>
</ol>
<h4 id="float布局的使用总结">float布局的使用总结</h4>
<ol>
<li>
<p>在子元素上加上float: left / right，和width属性。</p>
</li>
<li>
<p>在父元素上加上.clearfix属性，并添加对应属性值。</p>
</li>
</ol>
<h2 id="2-flex布局方式">2. flex布局方式</h2>
<h4 id="需求分析-1">需求分析</h4>
<p>flex布局，又称弹性布局，是目前使用最广泛的布局方式，除了ie浏览器外，大多数浏览器和其新版本都支持。这里有个英文网站介绍flex布局介绍得很详细，可参考这个<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-basics">css-tricks</a>网站。</p>
<h4 id="工作原理">工作原理</h4>
<p>flex布局采取容器(container)和项目(item)结合的方式进行布局，容器是父元素，项目是多个子元素，为父元素启用flex属性，就意味着要对该元素内的物体进行flex布局，以下便从容器(container)和项目(item)两个方面各自具有的属性进行介绍。</p>
<h4 id="flexcontainer属性">flex—container属性</h4>
<p><strong>1) 让一个元素变成flex容器</strong></p>
<p>给父元素加一个class=&quot;container&quot;的class属性名，然后设置如下即可变成一个容器：(一般容器父元素是块级元素或者内联块元素)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span> <span class="o">/</span> <span class="kc">inline</span><span class="o">-</span><span class="kc">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>flex和inline-flex的区别：</p>
<p>这两个属性值对其里面的项目子元素的布局没有任何影响，是对具有该容器属性的父元素类型的一个定义，flex是块级元素，inline-flex是内联块元素。对父元素同级的周围的元素有影响。</p>
<p><strong>2) 主轴方向：flex-direction</strong></p>
<p>flex布局默认是元素一字排开，flex布局下的元素没有块级元素、内联元素之分，经测试，flex布局下容器里的所有元素的{display: block / inline; }属性都没有任何作用，div也不再默认独占一行，而是根据其内容定大小，span的width、height属性也都起作用，可自定义其大小。</p>
<p>主轴方向属性是flex-direction，是用来定义一字排开的元素的方向是横着还是竖着。属性值如下：</p>
<p>**row：**默认值，主轴方向为从左向右，即将元素正向横着排布，如下图所示：</p>
<p><img src="/imgs/layout_pic05.JPG" alt="layout_pic05"></p>
<p>**row-reverse：**主轴方向为从右向左，即将元素逆向横着排布，如下图所示：</p>
<p><img src="/imgs/layout_pic06.JPG" alt="layout_pic06"></p>
<p>补充：在主轴方向为横向时，可看到所有元素都被挤在了一行，哪怕该元素设置了宽度也不起作用，文字都被挤成了竖着的，那是因为flex布局下的元素默认是一字排开，不换行。所以可以通过设置{flex-wrap: wrap;}属性来设置其换行，默认值是nowrap不换行，加入该属性后的样子如下图，可看到根据元素的内容大小或宽度进行换行。</p>
<p><img src="/imgs/layout_pic09.JPG" alt="layout_pic09"></p>
<p>**column：**主轴方向为从上往下，即将元素竖着正向排布，如下图所示：</p>
<p><img src="/imgs/layout_pic07.JPG" alt="layout_pic07"></p>
<p>**column-reverse：**主轴方向为从下往上，即将元素竖着逆向排布，如下图所示：</p>
<p><img src="/imgs/layout_pic08.JPG" alt="layout_pic08"></p>
<p><strong>3) 横向对齐：justify-content</strong></p>
<p>这个属性一般用于主轴方向为横向，且加入了自动换行属性的容器，自动换行后该行可能会出现一些空隙，如何处理这些空隙，让元素在有空隙的情况下以何种方式分布，正是justify-content属性所处理的。具体属性值如下：</p>
<p>**flex-start：**默认属性值，即每行所有元素向左边靠拢，如下图所示：</p>
<p><img src="/imgs/layout_pic10.JPG" alt="layout_pic10"></p>
<p><strong>flex-end</strong>：每行所有元素向右边靠拢，如下图所示：</p>
<p><img src="/imgs/layout_pic11.JPG" alt="layout_pic11"></p>
<p>**center：**每行所有元素居中靠拢，如下图所示：</p>
<p><img src="/imgs/layout_pic12.JPG" alt="layout_pic12"></p>
<p>**space-between：**每行元素在两边对齐，中间平分空隙，如下图所示：</p>
<p><img src="/imgs/layout_pic13.JPG" alt="layout_pic13"></p>
<p>**space-around：**每行元素的左右两边均有同等大小的空隙，所以中间元素的两个空隙挨着时空隙要大些，如下图所示：</p>
<p><img src="/imgs/layout_pic14.JPG" alt="layout_pic14"></p>
<p>**space-evenly：**空隙空间平均分，两边也有空隙，如下图所示：</p>
<p><img src="/imgs/layout_pic15.JPG" alt="layout_pic15"></p>
<p><strong>4) 纵向对齐：align-content</strong></p>
<p>该属性用于主轴方向为横向，且容器的高度高于多行元素的总高度，即纵向方向有空隙时，如何对纵向方向的空隙进行划分的布局方式，具体属性值如下：</p>
<p>**stretch：**当子元素没有自定义高度时，该属性值起作用，会将元素的高度拉伸，填满整个高度，如下图所示：</p>
<p><img src="/imgs/layout_pic20.JPG" alt="layout_pic20"></p>
<p>**flex-start：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic21.JPG" alt="layout_pic21"></p>
<p>**flex-end：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic22.JPG" alt="layout_pic22"></p>
<p>**center：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic23.JPG" alt="layout_pic23"></p>
<p>**space-between：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic24.JPG" alt="layout_pic24"></p>
<p>**space-around：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic25.JPG" alt="layout_pic25"></p>
<p>**space-evenly：**同justify-content类似，如下图所示：</p>
<p><img src="/imgs/layout_pic26.JPG" alt="layout_pic26"></p>
<p><strong>5) 次轴对齐：align-items</strong></p>
<p>这个属性是用于主轴方向为横向，而且每一行的每个元素的高度不同的情况的样式设置。具体属性值如下：</p>
<p>**flex-start：**默认属性值，即每行所有元素顶部对齐，如下图所示：</p>
<p><img src="/imgs/layout_pic17.JPG" alt="layout_pic17"></p>
<p>**flex-end：**即每行元素底部对齐，如下图所示：</p>
<p><img src="/imgs/layout_pic18.JPG" alt="layout_pic18"></p>
<p>**center：**即每行元素中间对齐，如下图所示：</p>
<p><img src="/imgs/layout_pic19.JPG" alt="layout_pic19"></p>
<p><strong>stretch：</strong></p>
<p><strong>baseline：</strong></p>
<h4 id="flexitem属性">flex—item属性</h4>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/css/">CSS</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/css/">CSS</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>浅析HTTP</title>
                <link>https://twinklelixn.top/posts/http-http/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/http-http/</guid>
                <pubDate>Tue, 28 Jan 2020 12:24:33 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-http">1. HTTP</h2>
<p>HTTP是www万维网中的重要组成部分，全称为Hyper Text Transfer Protocol，即超文本传输协议。是万维网中进行数据传输时规定的相互之间遵守的一定协议，HTTP的作用是用来负责客户端和服务器端数据传送的，不遵循HTTP协议就无法浏览网页。</p>
<h2 id="2-ip">2. IP</h2>
<p>IP全称为Internet Protocol，即互联网协议，是整个互联网正常运行需要遵循的一定协议，IP的作用是用来定位一个设备，没有IP就无法上网。</p>
<h2 id="3-端口">3. 端口</h2>
<p>一个服务器对应一个IP，但是一个服务器可以提供很多种功能，每一类功能都由一个号码确定，该号码就是端口号。要想获得某种服务就必须开通相应的端口，常见的服务对应的端口有：</p>
<p>http服务：80端口</p>
<p>https服务：443端口</p>
<p>ftp端口：21端口</p>
<p>一台服务器一共有65535个端口服务，通过维基百科搜索&quot; tcp端口 &quot;可查看0-1023号系统端口，只有管理员才能使用，其他端口是留给普通用户使用的。</p>
<p>因此有了端口后，通过IP和端口号可以定位一个设备提供的一个服务。</p>
<h2 id="4-域名">4. 域名</h2>
<p>域名是IP的字符串形式的别称，由于IP是一串数字，不好记忆，因此发明了可以自定义的好记的域名与IP进行映射，在命令行通过ping命令可查看域名对应的IP，如ping baidu.com可以查看到百度服务器的IP。</p>
<p>1）一个域名可以对应多个不同的IP</p>
<p>为了防止多用户同时访问服务器造成服务器的崩溃，设置一个域名可以对应多个服务器，即对应多个IP，来减少服务器的压力，这种操作称为负载均衡。</p>
<ol start="2">
<li>一个IP可以对应多个不同的域名</li>
</ol>
<p>可以共享主机</p>
<h2 id="5-dns">5. DNS</h2>
<p>IP和域名需要一个将其连接起来的设备，那就是DNS，全称为Domain Name System，即域名服务系统。域名服务器是将域名与IP对应起来的，在地址栏输入域名，会先询问DNS服务器查询具体IP，然后再通过IP找到该服务器。</p>
<p><strong>域名分类</strong></p>
<ol>
<li>
<p>com / cn等顶级域名</p>
</li>
<li>
<p>baidu.com是二级域名(俗称一级域名)</p>
</li>
<li>
<p><a href="http://www.baidu.com">www.baidu.com</a>是三级域名(俗称二级域名)，且www.baidu.com是baidu.com的子域名，且二者并不一定有关系，可能是两个独立的域名。如今很多网站的前面都会加www，是因为早期的网站为了注明是万维网，就会加www，但现在很多网站都不需要加www。</p>
</li>
</ol>
<p><strong>PS：</strong></p>
<p>像github网站，它的网站是github.com，它会将其所有的子域名免费分配给用户，以用户名为三级域名名，如我的用户名为LoveVin，我的免费域名为 lovevin.github.com。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/http/">HTTP</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/http/">HTTP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>浅析URL</title>
                <link>https://twinklelixn.top/posts/http-url/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/http-url/</guid>
                <pubDate>Tue, 28 Jan 2020 12:19:24 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-url是什么">1. URL是什么</h2>
<p>URL全称为Uniform Resource Locator，即统一资源定位符，是www万维网中的重要组成部分。万维网中的每一个页面都有一个对应的url，通过输入url地址向服务器发起页面请求。通过url，不仅可以访问到不同的页面，也可以访问到同一页面的不同内容，或者同一页面同一内容的不同内容块，这些均由url管理，那么url是怎么实现这些区分的呢？</p>
<h2 id="2-url的重要组成">2. URL的重要组成</h2>
<p>万维网上的任何一个网站的正常运行都离不开服务器，万维网的运行原理就是，输入一个地址，通过该地址找到对应的服务器，向该服务器请求html页面，并交由浏览器解析，然后浏览器负责将页面以可视化的形式展示出来。这个找到服务器的地址就是ip，难记的ip一般会绑定到一个好记的域名上，因此URL的重要组成部分就是域名，或ip。通过URL中的域名即可找到要请求的服务器，然后进行更细一步的划分。</p>
<h2 id="3-如何请求不同的页面">3. 如何请求不同的页面</h2>
<p>向服务器请求的html页面其实是存储在服务器端的文件内容，通过向服务器发送请求即可下载该文件并进行解析。因此不同的页面的请求可以通过路径得到，就像访问我们自己的电脑的文件夹一样。&quot; / &quot;是根目录的意思。例如访问百度页面时，在地址栏显示的是&quot; <a href="https://www.baidu.com/">https://www.baidu.com/</a> &quot;，跟在百度域名后面的&quot; / &quot;，即是访问百度服务器根目录的意思。如在百度搜索栏输入搜索词进入的页面的地址栏的前面部分为&quot; <a href="https://www.baidu.com/s?wd=">https://www.baidu.com/s?wd=</a>测试数据) &quot;，可以看到百度的搜索页面在根目录下的s文件目录下。</p>
<h2 id="4-如何请求到同一页面的不同内容">4. 如何请求到同一页面的不同内容</h2>
<p>有时候仔细查看会发现相同路径目录下的页面内容是不一样的，如百度，输入不同的关键字，细看地址栏可以看到前缀是一样的，页面的排版和构成是一样的。例如在百度搜索哈哈哈，得到的url是&quot; <a href="https://www.baidu.com/s?wd=">https://www.baidu.com/s?wd=</a>哈哈哈 &quot;，可以看到也是根目录的s文件目录下。那是因为可以通过不同的查询参数获得不同的页面内容，查询参数的写法即&quot; ?参数名=参数 &quot;等等形式。参数传参可以有多个，通过 &amp; 符号连接。在url中没有搜索功能的可没有该参数。</p>
<h2 id="5-如何请求到同一页面同一内容的不同内容块">5. 如何请求到同一页面同一内容的不同内容块</h2>
<p>有时候在同一个页面同一个搜索结果页面下，有时候页面内容过长，页面内容会根据标题等分模块，便可通过搜索或者目录的形式跳转到对应的模块，url便为该部分流出空间，语法格式为&quot; #内容块名 &quot;，称为锚点，点击可跳转到对应的内容块。例如 <a href="https://developer.mozilla.org/zh-CN/docs/Learn#">https://developer.mozilla.org/zh-CN/docs/Learn#</a>参见 ，即可跳到该页面的&quot; 参见 &quot;内容块。</p>
<h2 id="6-url完整构成">6. URL完整构成</h2>
<p>综上所述，URL的完整构成为：协议(http或https)://域名(或ip):端口号(可省略,默认是80端口)/路径/查询参数/锚点。</p>
<h2 id="7-注意事项">7. 注意事项</h2>
<ol>
<li>
<p>锚点是不允许有中文的，我们在地址栏看到的中文锚点名实际存储并传输的是一串乱码似的字符串，如上述的中文锚点，从地址栏复制黏贴下来，得到的是 <a href="https://developer.mozilla.org/zh-CN/docs/Learn#%E5%8F%82%E8%A7%81">https://developer.mozilla.org/zh-CN/docs/Learn#%E5%8F%82%E8%A7%81</a> ，可以看到&quot; 参见 &quot;是一串乱码字符串。</p>
</li>
<li>
<p>锚点的参数值是不会传递给服务器的，锚点是由浏览器负责执行对应功能的，不归服务器管理。</p>
</li>
</ol>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/http/">HTTP</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/url/">URL</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/http/">HTTP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>HTML重点标签篇</title>
                <link>https://twinklelixn.top/posts/html-key-tags/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/html-key-tags/</guid>
                <pubDate>Tue, 28 Jan 2020 12:15:01 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="1-a-标签">1. a 标签</h2>
<p><strong>href 属性</strong>：href即hyper(超级)-reference(链接/引用)的缩写，即为超链接的意思。该属性值为超链接地址名。该属性值的取值形式为：</p>
<p>1）网络地址：</p>
<ul>
<li>&quot;https://baidu.com&quot;：</li>
<li>&quot;http://baidu.com&quot;：</li>
<li>&quot;//baidu.com&quot;：无协议网址</li>
</ul>
<p>2）文件路径：</p>
<ul>
<li>相对路径：同一文件内的本地html页面所在的相对路径名作为链接地址。</li>
<li>绝对路径：当前打开的文件为根目录</li>
</ul>
<p>3）伪协议：</p>
<ul>
<li>&quot; javescript:代码; &quot;：可用于写一个a标签但又不想做任何操作，就用href=&quot;javascript:;&quot;。若用href=&quot;&quot;，点击会刷新页面，href=&quot;#&quot;点击不会刷新页面但是会跳转至顶部。因此，只有用js伪协议才能真正做到点击a标签什么都不做。</li>
<li>&quot;#id值&quot;：可跳转到该id值标签的内容所在部分。</li>
<li>&quot; mailto:邮箱 &quot;：打开邮箱并自动填入邮箱地址</li>
<li>&quot; tel:手机号&quot;：打开拨号页面并自动填入号码</li>
</ul>
<p><strong>target 属性</strong>：该属性是指跳转方向的意思，即将在哪个窗口打开该链接地址。基本属性值有五类，分别为</p>
<ul>
<li>&quot;_self&quot;：在当前页面打开超链接</li>
<li>&quot;_blank&quot;：在新的空白页面打开超链接</li>
<li>&quot;_parent&quot;：若有iframe包含的子窗口、孙窗口等，在当前窗口的上一层父窗口打开超链接</li>
<li>&quot;_top&quot;：若有iframe包含的子窗口、孙窗口等，在最外层窗口即祖宗窗口打开超链接。</li>
<li>&quot;xxx&quot;：会先检查有没有叫xxx名字的窗口，若没有则新建一个窗口命名为xxx，当后面再有一个值为xxx时便是该窗口打开。可用于设置利用同一个窗口打开覆盖多个页面。也可给iframe窗口的name命名为xxx，则打开的页面就是在iframe窗口打开了。</li>
</ul>
<p><strong>download 属性</strong>：非赋值属性，开启后点击该链接会下载超链接地址中的网页，而不是查看，但浏览器大部分不支持。</p>
<h2 id="2-table-标签">2. table 标签</h2>
<p>tabel中常用的结构标签有三个，分别是：</p>
<pre><code>&lt;table&gt;
      &lt;thead&gt;表头&lt;/thead&gt;
      &lt;tbody&gt;主体&lt;/tbody&gt;
      &lt;tfoot&gt;表尾&lt;/tfoot&gt;
    &lt;/table&gt;
</code></pre><p>然后是表项标签分别有：</p>
<ul>
<li>tr：即table row，是表中的一行</li>
<li>th：即table header，是指表头，默认会加粗显示。</li>
<li>td：即table data：表中的一项数据</li>
</ul>
<p><strong>table的几个样式</strong>：</p>
<ul>
<li>table-layout：可用于定义每列宽度是相等还是根据字数大小分布。auto和fixed。</li>
<li>border-collapse：取值为collapse，则可合并单元格去除表项内边界。</li>
<li>border-spacing：一般设置边界间隔为0。</li>
</ul>
<h2 id="3-img-标签">3. img 标签</h2>
<p>该标签会发出一个get请求，返回一张图片。</p>
<p><strong>属性</strong></p>
<p><strong>src 属性</strong>：属性值为图片的地址，可为网络地址也可为相对或者绝对路径。</p>
<p><strong>alt属性</strong>：即alternative，可供选择的，当图片加载失败后，显示该部分内容。</p>
<p><strong>width</strong>：只写宽度，高度会自适应等比缩放。</p>
<p><strong>height</strong>：只写高度，宽度会自适应等比缩放。</p>
<p><strong>事件</strong></p>
<p>onload和onerror，其中onerror可用于加载图片加载失败的图片。</p>
<h2 id="4-form-标签">4. form 标签</h2>
<p>该标签会发送一个get或者post请求然后刷新页面</p>
<p><strong>属性</strong></p>
<p><strong>action属性</strong>：以get或者post的方式请求到action属性值里对应的页面。</p>
<p><strong>method属性</strong>：请求方式的设置，get和post。</p>
<p><strong>autocomplete属性</strong>：设置form的autocomplete属性值为&quot;on&quot;，然后在表单的input的输入标签中设置input的name=&quot;username&quot;，则输入框获得焦点后会显示用户在该浏览器上曾经输入过的用户名。可选择并自动填充。</p>
<p><strong>target属性</strong>：和a标签的target属性类型，设置提交到哪个页面。</p>
<p><strong>事件</strong></p>
<p>onsubmit事件</p>
<p><strong>from相关的其他知识</strong>：</p>
<p>form中一定要有个type=&quot;submit&quot;的提交按钮，可以是<code>&lt;input type=&quot;submit&quot;/&gt;</code>也可以是<code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</code>，其中button不写类型默认是type=&quot;submit&quot;。两个按钮的区别是，input标签里不能有其他内容，但button标签里可以再包含其他标签，也可用图片做按钮等。</p>
<h2 id="5-input-标签">5. input 标签</h2>
<p>该标签的主要目的是让用户输入内容</p>
<p><strong>属性</strong>：</p>
<p><strong>type 属性</strong>：</p>
<ul>
<li>text：默认属性值，为输入文本框</li>
<li>button：为按钮</li>
<li>color：为一个颜色选择器</li>
<li>password：为输入密码，不显示输入内容，以······代替</li>
<li>radio：单选，要设置多个radio类型的input的name属性值相同，归为一组，在一组中单选</li>
<li>checkbox：多选，一组checkbox类型的input也要name相同，便于后续获取该选择的数组。</li>
<li>file：选择一个文件，在其后再加multiple即<code> &lt;input type=&quot;file&quot; multiple/&gt;</code>，可同时选择多个文件内容。</li>
<li>hidden：隐藏文本框</li>
<li>number：只能输入数字，且可从输入的数字连续点击增1减1。</li>
<li>search：搜索框，会有x号出现删除搜索内容</li>
</ul>
<p><strong>required 属性</strong>：
非赋值属性，启用该属性则点击提交时提示请填写此字段，HTML自带的验证功能。</p>
<p><strong>事件</strong>：</p>
<ul>
<li>onchange：内容改变时触发的事件</li>
<li>onfocus：文本框获得焦点时触发的事件</li>
<li>onblur：文本框失去焦点时触发的事件</li>
</ul>
<h2 id="6-textarea-标签">6. textarea 标签</h2>
<p>input是单行输入，textarea是多行输入，且什么属性不设置的话，该文本框可被拖动放大缩小。可设置其style属性为<code>&lt;textarea style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;</code>可固定该文本框大小禁止拖动。</p>
<h2 id="7-selectoption-标签">7. select+option 标签</h2>
<p>可用于做选择列表，option标签是每一项内容。</p>
<p>未完待续。。。。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/html/">HTML</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/">HTML重点标签</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>HTML属性篇</title>
                <link>https://twinklelixn.top/posts/html-property/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/html-property/</guid>
                <pubDate>Tue, 28 Jan 2020 12:10:13 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h3 id="1属性分类">1.属性分类</h3>
<p>标签的属性按设置方式分为赋值型属性和非赋值型属性（即bool属性）</p>
<ul>
<li>赋值属性语法：<code>&lt;tag attr=value&gt;&lt;/tag&gt;</code></li>
<li>非赋值型语法：<code>&lt;tag attr&gt; //写attr即为开启该属性，不写attr即为不开启该属性</code></li>
</ul>
<h3 id="2全局属性">2.全局属性</h3>
<p>全局属性即所有标签都有的属性，如下：</p>
<p><strong>class</strong>：给标签分类，即给该标签下的内容块做个标记，便于对该块内容设置样式。多个标签可以有相同的class名字，则可通过相同class名给多个内容设置相同的样式等。同时，class名字也可有多个，如class=&quot;middle top&quot;，名字用空格隔开，可用.class部分匹配，但其实名字是一个整体。<br>
class属性的两种取法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p"></span><span class="p">&gt;</span>
    <span class="o">[</span><span class="nt">class</span><span class="o">=</span><span class="s2">&#34;middle&#34;</span><span class="o">]</span><span class="p">{</span>
    <span class="p">}</span> <span class="o">/</span><span class="o">/</span><span class="nt">该方法无效</span><span class="err">，</span><span class="nt">用</span><span class="o">[</span><span class="nt">class</span><span class="o">=</span><span class="o">]</span><span class="nt">的取法属性名必须为全名匹配</span><span class="err">。</span>
    <span class="p">.</span><span class="nc">middle</span><span class="p">{</span>
    <span class="p">}</span> <span class="o">/</span><span class="o">/</span><span class="nt">该方法可以根据class属性名中的空格进行部分匹配</span><span class="err">，</span><span class="nt">有效</span><span class="err">。</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>id</strong>：标记该元素为全页面唯一，但其实唯一性根本不起作用，在css中两个id名相同也不报错，但在js中获取会报错，而且也难保证id名不会重复，因此尽量用class。<br>
id属性名的两种取法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p"></span><span class="p">&gt;</span>
    <span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="nt">xxx</span><span class="o">]</span><span class="p">{</span>
    <span class="p">}</span>
    <span class="p">#</span><span class="nn">xxx</span><span class="p">{</span>
    <span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>contenteditable</strong>：非赋值型属性，标签开启该属性可使该标签内的内容可在页面被编辑。</p>
<p><strong>hidden</strong>：非赋值型属性，标签开启该属性可使该标签内容存在但是是隐藏状态。hidden是可以用style样式的<code>display:block</code>样式挽回的，即显示。</p>
<p><strong>style</strong>：设置标签样式的属性，属性值和<code>&lt;style&gt;</code>样式标签里的写法一样。style的优先级为&quot; js&gt;style属性&gt;css &quot;</p>
<p><strong>tabindex</strong>：为页面内容每块设置tabindex值，可响应tab键切换页面选中的内容，该属性值有三种赋值情况：</p>
<ul>
<li>正数值：不需连续，按照从小到大顺序切换</li>
<li>0：是最后一个访问的块</li>
<li>负数：不选中到该块。</li>
</ul>
<p><strong>title</strong>：鼠标放置该标签的内容模块时显示title的内容。可用于提示，例如一段话中未显示完全时，可用title属性值放剩余完整内容。</p>
<p>待更新。。。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/html/">HTML</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/html%E5%B1%9E%E6%80%A7/">HTML属性</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>HTML基本标签篇</title>
                <link>https://twinklelixn.top/posts/html-basic-tags/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/html-basic-tags/</guid>
                <pubDate>Tue, 28 Jan 2020 12:04:43 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h3 id="1结构标签">1.结构标签</h3>
<p>html文件的基本结构为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>其中head标签部分一般放看不见的相关设置内容，页面显示的内容是在body中编写，在body标签中body被一些标签划分成有结构的部分。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">header</span><span class="p"></span><span class="p">&gt;</span>头部<span class="p">&lt;</span><span class="p">/</span><span class="nt">header</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">main</span><span class="p"></span><span class="p">&gt;</span>页面主要部分<span class="p">&lt;</span><span class="p">/</span><span class="nt">main</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">aside</span><span class="p"></span><span class="p">&gt;</span>次要部分<span class="p">&lt;</span><span class="p">/</span><span class="nt">aside</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">footer</span><span class="p"></span><span class="p">&gt;</span>尾部<span class="p">&lt;</span><span class="p">/</span><span class="nt">footer</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>除此之外还有的结构标签有：<br>
<strong>h1~h6</strong>：加粗标题</p>
<p><strong>section</strong>：划分文档中的一个独立部分  ，一般包含一个h标题和一p段等。</p>
<p><strong>article</strong>：划分文档中的文章部分，一篇文章又可包含多个section部分。</p>
<p><strong>p</strong>：块级元素，表示文本的一个段落。</p>
<p><strong>div</strong>：是一个无实义容器标签，将文档分区。</p>
<h3 id="2内容标签">2.内容标签</h3>
<p><strong>ol+li</strong>：ol即ordered list，li即list-item。该组合是编写有序列表内容的。ol标签为列表，li标签为列表项。ol中只能有li列表项，列表项中才能写内容 。</p>
<p><strong>ul+li</strong>：ul即unordered list，与ol相对应的无序列表。</p>
<p><strong>dl+dt+dd</strong>：dl即description-list描述列表，dt即description-term写描述的对象是谁，dd即description-data对该对象的描述内容</p>
<p><strong>pre</strong>：html默认多个空格或tab或回车都显示为一个空格，添加pre标签包裹内容可以保留多个空格、tab、回车等样式。</p>
<p><strong>code</strong>：code标签是用来包裹代码片段的，代码的字母一般是等宽的，如不加code，字母不等宽，代码不好看。用pre+code写代码片段。</p>
<p><strong>hr</strong>：水平分割线</p>
<p><strong>br</strong>：br即break，换行。</p>
<p><strong>em</strong>：em即emphasis强调的意思，可用于强调一句话中的某个词，显示样式为斜体，样式可改。</p>
<p><strong>strong</strong>：给一句话加上Strong表示该句是重点，显示样式为加粗，样式可改。</p>
<p><strong>quote</strong>：内联引用，如果想换行用块行引用，即用blockquote标签</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/html/">HTML</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/html%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/">HTML基本标签</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>HTML发展概况</title>
                <link>https://twinklelixn.top/posts/html-history/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/html-history/</guid>
                <pubDate>Mon, 27 Jan 2020 22:22:26 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h3 id="1万维网和互联网">1.万维网和互联网</h3>
<p><strong>互联网</strong>——互联网是指我们整个网络系统的总称，自网络的出现就叫互联网，最初是指一个IP与一个IP通过网络发送消息传递信息，将人与人之间相互连接起来，因此叫互联网。</p>
<p><strong>万维网</strong>——万维网简称WWW(World-Wide-Web)，是指输入一个网址(URL)，以HTTP传输协议传输，返回一个网页的上网方式，是由万维网之父Tim-Berners-Lee（蒂姆·伯纳斯·李）发明的，返回的该网页页面是用HTML(Hypertext-Marked-Language)超文本标记语言编写的，通过浏览器识别并以网页形式展现给人们的。</p>
<h3 id="2html标准制定者">2.HTML标准制定者</h3>
<p>HTML标准是由W3C，即 World-Wide-Web-Consortium(W3C)万维网联盟建立的，W3C的创立者是Tim-Berners-Lee（蒂姆·伯纳斯·李）</p>
<h3 id="3html5和h5">3.HTML5和H5</h3>
<p><strong>HTML5</strong>——html5是html超文本语言的进化版，在原有的html语言上加入了新的标签和新的标准，是一套新的web开发标准。</p>
<p><strong>H5</strong>——h5不是html5的简称，和html5完全没有关系。h5是中国人自己造的专有名词，就是指手机版本的网页页面，实现语法不一定要用html5。简单说做一个h5就是指做个手机页面。</p>
<h3 id="4html特殊语法">4.HTML特殊语法</h3>
<ul>
<li><code>&lt;!DOCTYPE html&gt;</code> 是标明以下语法是html语法，DOCTYPE是文档类型的意思。</li>
<li>标签有双闭合标签和单闭合标签之分。</li>
<li>标签属性有两种，一种是赋值型，attr=xxx或attr='xxx'或attr=&quot;xxx&quot;，当属性值中无特殊字符时，有引号、单引号、双引号都可以，有特殊字符时必须加引号。</li>
<li>注释语法：<code>&lt;!-- --&gt;</code></li>
</ul>
<h3 id="5html基本语句解释">5.HTML基本语句解释</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>//标记文档类型为html
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p"></span><span class="p">&gt;</span>//文档使用语言，有en英文，和zh-CN中文
  <span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/</span><span class="p">&gt;</span>//定义编码方式为UTF-8
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span> <span class="p">/</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span> <span class="p">/</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span>Document<span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/html/">HTML</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/html%E5%8F%91%E5%B1%95/">HTML发展</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何使用GitHub Pages预览 HTML</title>
                <link>https://twinklelixn.top/posts/how-to-use-githubpages/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/how-to-use-githubpages/</guid>
                <pubDate>Wed, 08 Jan 2020 12:15:31 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h3 id="1github提供免费域名">1.GitHub提供免费域名</h3>
<p>GitHub可以预览HTML文件，同时只要有一个GitHub账号，用户就有一个特定的免费域名，即用户名.github.io，比如我的GitHub账号名字为LoveVin，则全部换成小写后，我的免费域名为lovevin.github.io。</p>
<h3 id="2最短域名网站">2.最短域名网站</h3>
<p>用户可在GitHub创建一个与免费域名同名的仓库，如我的同名仓库为lovevin.github.io，然后将网站文件夹push进该仓库，然后在该仓库的settings里往下翻找到GitHub Pages 一项可以看到一个网址，该仓库对应的为用户网页，默认只能是master分支，点击该网址即可看到自己的网站，即通过免费域名访问的最短网址。</p>
<p><img src="/imgs/hugo14.JPG" alt="这图片"></p>
<p><img src="/imgs/hugo15.JPG" alt="这图片"></p>
<h3 id="3发布项目网站">3.发布项目网站</h3>
<p>GitHub预览HTML不仅仅局限于免费域名同名仓库，用户可建立其他HTML项目仓库，通过GitHub Pages访问，也是进入settings里，找到GitHub Pages，不过这里用户要自己选择分支。我这里选择的是master分支，好像可以选择其他分支，具体其他情况未尝试过。然后会得到一个网址，点击该网址即可访问，若不能访问就在该网址后加?...或者加具体网页名，如index.html。而且具体观察会发现，该项目仓库的网址也是免费域名/仓库名，像是域名下的一个文件夹，所以还是用户还是只有一个特定的GitHub免费域名。</p>
<p><img src="/imgs/hugo16.JPG" alt="这图片"></p>
<p><img src="/imgs/hugo17.JPG" alt="这图片"></p>
<h3 id="4绑定自定义域名">4.绑定自定义域名</h3>
<p>如果觉得GitHub的免费域名不够炫酷，可以自定义域名绑定在GitHub的域名上，自己买一个域名，添加至GitHub Pages里的Custom domain选项里保存即可。如上述2，图中红线圈出的位置。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/github/">GitHub</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/html/">HTML</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何使用GitHub直接预览Markdown文件</title>
                <link>https://twinklelixn.top/posts/github-preview-markdown/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/github-preview-markdown/</guid>
                <pubDate>Wed, 08 Jan 2020 12:15:31 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>GitHub 是可以直接预览 markdown 文件的，也就是说可以直接在 GitHub 上写博客，具体操作如下：</p>
<ol>
<li>在 GitHub 新建一个仓库，并在新建的仓库点击新创建一个 README.md 文件</li>
</ol>
<p><img src="/imgs/hugo11.JPG" alt="这图片"></p>
<ol start="2">
<li>然后用 markdown 语法写 README.md 文件，可一边写，一边右边 preview 预览效果。写完后保存，即可用该 markdown 文件所在的网址发给别人看自己的博客。同时也可在其他地方写好 markdown 文件，push 进 GitHub 仓库。</li>
</ol>
<p><img src="/imgs/hugo12.JPG" alt="这图片"></p>
<p><img src="/imgs/hugo13.JPG" alt="这图片"></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/github/">GitHub</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/markdown/">Markdown</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何用hugo搭建个人博客</title>
                <link>https://twinklelixn.top/posts/how-to-use-hugo/</link>
                <guid isPermaLink="true">https://twinklelixn.top/posts/how-to-use-hugo/</guid>
                <pubDate>Wed, 08 Jan 2020 11:54:33 +0800</pubDate>
                
                    <author>twinkelixn@qq.com (LoveVin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h3 id="1hugo-的安装">1.hugo 的安装</h3>
<h4 id="方法一">方法一</h4>
<p>去 hugo 官网按照教程找对应版本的安装方法 <a href="https://gohugo.io/getting-started/installing">hugo 各系统安装</a></p>
<h4 id="其他-windows-安装方法">其他 windows 安装方法</h4>
<p>直接在 hugo 的 github 里下载资源包<a href="https://github.com/gohugoio/hugo/releases">hugo-github-release</a>，在其中找到 windows 版本的 Assets，如下图：</p>
<p><img src="/imgs/hugo1.JPG" alt="本图片"></p>
<p>下载后解压到自定义的软件文件夹内，然后解压后的如下图：</p>
<p><img src="/imgs/hugo2.JPG" alt="本图片"></p>
<p>然后复制该.exe 文件所在的路径，添加至环境变量的 path 中，不知道环境变量配置的看文章最后图解。</p>
<p>配置成功后在命令窗口运行
<code>hugo version</code>
若能成功出现版本号，则表示安装成功，如下图所示：
<img src="/imgs/hugo8.png" alt="本图片"></p>
<h3 id="2hugo-创建博客">2.hugo 创建博客</h3>
<p>可按照 hugo 官方教程的创建步骤进行 <a href="https://gohugo.io/getting-started/quick-start/">hugo 快速搭建博客</a></p>
<p>具体创建代码和过程如下：</p>
<ol>
<li>
<p>hugo new site 路径/创建的文件名 //在该指定路径下创建一个 hugo 工作文件夹，不加路径默认在命令行当前目录下创建，运行代码如下：</p>
<p><img src="/imgs/hugo9.png" alt="本图片"></p>
</li>
<li>
<p>创建完成后的文件夹里的文件如下：</p>
<p><img src="/imgs/hugo10.JPG" alt="本图片"></p>
<p>themes 文件夹里是放下载的博客主题，static 文件夹下放写博客需要的图片资源，content 文件夹下放写的博客内容</p>
</li>
<li>
<p>进入创建的文件里，安装主题，可去网上找到想要的 hugo 主题，用 hugo clone 到 themes 中即可，不同主题的配置方式不同，具体按照找到主题的方式配置，本主题选择的教程为<a href="https://github.com/xianmin/hugo-theme-jane">Jane 主题教程</a>。</p>
</li>
<li>
<p>然后就根据选择的主题进行更改，每个主题要更改的方式不同，比较复杂。。。。我自己也没完全搞懂，待后续完善！</p>
</li>
<li>
<p>hugo 中创建一篇博客语句为<code>hugo new posts/my-first-post.md</code>，md 文件的编写语言是 markdown 语言的语法。</p>
</li>
<li>
<p>在该文件夹下运行<code>hugo</code>命令会生成一个 public 文件夹，该文件夹就是将你写的 md 文件转化为可以在网页上运行的 html、css 文件等，是可以完整发布在 github 的。</p>
</li>
<li>
<p>然后运行<code>hugo server</code>或者<code>hugo server -D</code>根据提示按住 ctrl 键点击生成的本地网址，预览生成的网页。注意要运行在 public 文件夹外的目录下</p>
<p><code>hugo server</code>：预览不包含草稿状态的页面</p>
<p><code>hugo server -D</code>：预览包含草稿状态的页面</p>
</li>
<li>
<p>发布到 github 的时候只发布 public 文件夹即可，该文件夹另存储一下，该文件夹是博客页面生成源码，public 丢失时，再 hugo 一下本文件夹即可再生成 public 文件夹。</p>
</li>
</ol>
<h3 id="3环境变量配置图解">3.环境变量配置图解</h3>
<p><img src="/imgs/hugo3.png" alt="本图片"></p>
<p><img src="/imgs/hugo4.JPG" alt="本图片"></p>
<p><img src="/imgs/hugo5.JPG" alt="本图片"></p>
<p><img src="/imgs/hugo6.JPG" alt="本图片"></p>
<p><img src="/imgs/hugo7.JPG" alt="本图片"></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/hugo/">hugo</category>
                                
                            
                                
                                
                                
                                    <category domain="https://twinklelixn.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>